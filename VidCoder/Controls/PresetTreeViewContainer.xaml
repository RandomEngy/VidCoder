<UserControl
	x:Class="VidCoder.Controls.PresetTreeViewContainer"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:local="clr-namespace:VidCoder.Controls"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:res="clr-namespace:VidCoder.Resources"
	xmlns:selectors="clr-namespace:VidCoder.View.Selectors"
	d:DesignHeight="300"
	d:DesignWidth="300"
	mc:Ignorable="d">
	<UserControl.Resources>
		<PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z" />
		<Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
			<Setter Property="Focusable" Value="False" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Grid Background="Transparent">
							<Border
								Width="18"
								Height="18"
								Padding="5 5 0 5"
								HorizontalAlignment="Left"
								VerticalAlignment="Center">
								<Path
									x:Name="ExpandPath"
									HorizontalAlignment="Left"
									VerticalAlignment="Center"
									Data="{StaticResource TreeArrow}"
									Fill="{DynamicResource TreeViewItem.TreeArrow.Static.Fill}"
									Stroke="{DynamicResource TreeViewItem.TreeArrow.Static.Stroke}"
									UseLayoutRounding="True">
									<Path.RenderTransform>
										<RotateTransform Angle="135" CenterX="3" CenterY="3" />
									</Path.RenderTransform>
								</Path>
							</Border>
						</Grid>

						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="True">
								<Setter TargetName="ExpandPath" Property="RenderTransform">
									<Setter.Value>
										<RotateTransform Angle="180" CenterX="3" CenterY="3" />
									</Setter.Value>
								</Setter>
								<Setter TargetName="ExpandPath" Property="Fill" Value="{DynamicResource TreeViewItem.TreeArrow.Static.Checked.Fill}" />
								<Setter TargetName="ExpandPath" Property="Stroke" Value="{DynamicResource TreeViewItem.TreeArrow.Static.Checked.Stroke}" />
							</Trigger>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter TargetName="ExpandPath" Property="Stroke" Value="{DynamicResource TreeViewItem.TreeArrow.MouseOver.Stroke}" />
								<Setter TargetName="ExpandPath" Property="Fill" Value="{DynamicResource TreeViewItem.TreeArrow.MouseOver.Fill}" />
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsMouseOver" Value="True" />
									<Condition Property="IsChecked" Value="True" />
								</MultiTrigger.Conditions>
								<Setter TargetName="ExpandPath" Property="Stroke" Value="{DynamicResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}" />
								<Setter TargetName="ExpandPath" Property="Fill" Value="{DynamicResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}" />
							</MultiTrigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="PresetTreeFolderItemStyle" TargetType="{x:Type TreeViewItem}">
			<EventSetter Event="DragOver" Handler="OnPresetTreeFolderDragOver" />
			<EventSetter Event="Drop" Handler="OnPresetTreeFolderDrop" />
			<EventSetter Event="PreviewDragLeave" Handler="OnPresetTreeFolderPreviewDragLeave" />
			<Setter Property="IsSelected" Value="False" />
			<Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
			<Setter Property="Focusable" Value="False" />
			<Setter Property="Background" Value="Transparent" />
			<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
			<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
			<Setter Property="Padding" Value="1 0 0 0" />
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TreeViewItem}">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition />
							</Grid.RowDefinitions>
							<Grid Grid.Row="0" Background="Transparent">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="14" />
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>
								<Grid.ContextMenu>
									<ContextMenu Visibility="{Binding IsBuiltIn, Converter={StaticResource InverseVisibilityConverter}}">
										<MenuItem Command="{Binding CreateSubfolder}" Header="{x:Static res:EncodingRes.PresetFolderCreateSubfolderMenuItem}">
											<MenuItem.Icon>
												<Image
													Width="16"
													Height="16"
													Source="/Icons/add_folder.png" />
											</MenuItem.Icon>
										</MenuItem>
										<MenuItem
											Command="{Binding RenameFolder}"
											Header="{x:Static res:EncodingRes.PrestFolderRenameFolderMenuItem}"
											Visibility="{Binding IsNotRoot,
											                     Converter={StaticResource VisibilityConverter}}">
											<MenuItem.Icon>
												<Image
													Width="16"
													Height="16"
													Source="/Icons/rename_folder.png" />
											</MenuItem.Icon>
										</MenuItem>
										<MenuItem
											Command="{Binding RemoveFolder}"
											Header="{x:Static res:EncodingRes.PresetFolderRemoveFolderMenuItem}"
											Visibility="{Binding IsNotRoot,
											                     Converter={StaticResource VisibilityConverter}}">
											<MenuItem.Icon>
												<Image
													Width="16"
													Height="16"
													Source="/Icons/delete_folder.png" />
											</MenuItem.Icon>
										</MenuItem>
									</ContextMenu>
								</Grid.ContextMenu>
								<Border
									x:Name="Bd"
									Grid.Column="0"
									Grid.ColumnSpan="3"
									Margin="-100 0 0 0"
									Padding="{TemplateBinding Padding}"
									Background="{TemplateBinding Background}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}" />
								<ContentPresenter
									x:Name="PART_Header"
									Grid.Column="1"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalAlignment="Stretch"
									ContentSource="Header"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								<ToggleButton
									x:Name="Expander"
									Grid.Column="0"
									Grid.ColumnSpan="3"
									HorizontalAlignment="Stretch"
									VerticalAlignment="Stretch"
									ClickMode="Press"
									IsChecked="{Binding IsExpanded,
									                    RelativeSource={RelativeSource TemplatedParent}}"
									Style="{StaticResource ExpandCollapseToggleStyle}" />
								<Button
									x:Name="PresetFolderMenu"
									Grid.Column="2"
									Padding="5 0"
									HorizontalAlignment="Left"
									Click="OnPresetFolderMenuClick"
									Content="...">
									<Button.Style>
										<Style BasedOn="{StaticResource BorderlessButtonStyle}" TargetType="Button">
											<Style.Triggers>
												<MultiDataTrigger>
													<MultiDataTrigger.Conditions>
														<Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=Grid}, Path=IsMouseOver}" Value="False" />
														<Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=Grid}, Path=ContextMenu.IsOpen}" Value="False" />
													</MultiDataTrigger.Conditions>
													<MultiDataTrigger.Setters>
														<Setter Property="Visibility" Value="Collapsed" />
													</MultiDataTrigger.Setters>
												</MultiDataTrigger>
												<DataTrigger Binding="{Binding IsBuiltIn}" Value="True">
													<Setter Property="Visibility" Value="Collapsed" />
												</DataTrigger>
												<DataTrigger Binding="{Binding EnableFolderActions, RelativeSource={RelativeSource AncestorType={x:Type local:PresetTreeViewContainer}}}" Value="False">
													<Setter Property="Visibility" Value="Collapsed" />
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</Button.Style>
								</Button>
							</Grid>

							<ItemsPresenter
								x:Name="ItemsHost"
								Grid.Row="1"
								Margin="10 0 0 0" />
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsExpanded" Value="False">
								<Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
							</Trigger>
							<Trigger Property="HasItems" Value="False">
								<Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
							</Trigger>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
					<Setter Property="ItemsPanel">
						<Setter.Value>
							<ItemsPanelTemplate>
								<VirtualizingStackPanel />
							</ItemsPanelTemplate>
						</Setter.Value>
					</Setter>
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="PresetTreeItemStyle" TargetType="{x:Type TreeViewItem}">
			<EventSetter Event="MouseDown" Handler="OnPresetTreeItemMouseDown" />
			<EventSetter Event="MouseMove" Handler="OnPresetTreeItemMouseMove" />
			<EventSetter Event="RequestBringIntoView" Handler="OnRequestBringPresetIntoView" />
			<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
			<Setter Property="HorizontalContentAlignment" Value="Stretch" />
			<Setter Property="Background" Value="Transparent" />
			<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
			<Setter Property="Padding" Value="1 0 0 0" />
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TreeViewItem}">
						<Grid>
							<Border
								x:Name="Bd"
								Margin="-100 0 0 0"
								Padding="{TemplateBinding Padding}"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								SnapsToDevicePixels="true" />
							<ContentPresenter
								x:Name="PART_Header"
								Margin="12 0 0 0"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								ContentSource="Header"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Grid>

						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter TargetName="Bd" Property="Background" Value="{DynamicResource MouseOverBackgroundBrush}" />
							</Trigger>
							<Trigger Property="IsSelected" Value="True">
								<Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
							</Trigger>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
					<Setter Property="ItemsPanel">
						<Setter.Value>
							<ItemsPanelTemplate>
								<VirtualizingStackPanel />
							</ItemsPanelTemplate>
						</Setter.Value>
					</Setter>
				</Trigger>
			</Style.Triggers>
		</Style>
	</UserControl.Resources>
	<local:PresetTreeView
		x:Name="presetTreeView"
		HorizontalAlignment="Stretch"
		AllowDrop="True"
		Background="{DynamicResource AlternateBackgroundBrush}"
		BorderThickness="0"
		Canvas.ZIndex="3"
		ItemsSource="{Binding PresetsService.AllPresetsTree}"
		SelectedItemChanged="TreeView_OnSelectedItemChanged">
		<TreeView.ItemTemplateSelector>
			<selectors:PresetTreeTemplateSelector>
				<selectors:PresetTreeTemplateSelector.FolderTemplate>
					<HierarchicalDataTemplate ItemsSource="{Binding AllItemsBindable}">
						<TextBlock
							Margin="5"
							FontSize="14"
							Text="{Binding Name}" />
					</HierarchicalDataTemplate>
				</selectors:PresetTreeTemplateSelector.FolderTemplate>
				<selectors:PresetTreeTemplateSelector.PresetTemplate>
					<DataTemplate>
						<TextBlock
							Margin="5 7"
							FontSize="12"
							Text="{Binding DisplayNameWithStar}">
							<TextBlock.Style>
								<Style TargetType="TextBlock">
									<Style.Triggers>
										<DataTrigger Binding="{Binding Preset.IsBuiltIn}" Value="False">
											<Setter Property="Foreground" Value="{DynamicResource SpecialTextBrush}" />
											<Setter Property="FontWeight" Value="SemiBold" />
										</DataTrigger>
										<DataTrigger Binding="{Binding Preset.IsQueue}" Value="True">
											<Setter Property="FontWeight" Value="Normal" />
										</DataTrigger>
										<DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=TreeViewItem}}" Value="True">
											<Setter Property="FontWeight" Value="Bold" />
										</DataTrigger>
										<MultiDataTrigger>
											<MultiDataTrigger.Conditions>
												<Condition Binding="{Binding Preset.IsBuiltIn}" Value="False" />
												<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=TreeViewItem}}" Value="True" />
											</MultiDataTrigger.Conditions>
											<Setter Property="Foreground" Value="{DynamicResource SpecialTextHighlightedBrush}" />
										</MultiDataTrigger>
									</Style.Triggers>
								</Style>
							</TextBlock.Style>
						</TextBlock>
					</DataTemplate>
				</selectors:PresetTreeTemplateSelector.PresetTemplate>
			</selectors:PresetTreeTemplateSelector>
		</TreeView.ItemTemplateSelector>
		<TreeView.ItemContainerStyleSelector>
			<selectors:PresetTreeContainerStyleSelector FolderStyle="{StaticResource PresetTreeFolderItemStyle}" PresetStyle="{StaticResource PresetTreeItemStyle}" />
		</TreeView.ItemContainerStyleSelector>
		<TreeView.ItemsPanel>
			<ItemsPanelTemplate>
				<StackPanel />
			</ItemsPanelTemplate>
		</TreeView.ItemsPanel>
		<TreeView.Template>
			<ControlTemplate TargetType="TreeView">
				<Border
					BorderBrush="{TemplateBinding BorderBrush}"
					BorderThickness="{TemplateBinding BorderThickness}"
					SnapsToDevicePixels="true">
					<ItemsPresenter />
				</Border>
			</ControlTemplate>
		</TreeView.Template>
	</local:PresetTreeView>
</UserControl>

