<Window
	x:Class="VidCoder.View.Main"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:VidCoderDragDrop="clr-namespace:VidCoder.DragDropUtils"
	xmlns:behaviors="clr-namespace:VidCoder.Behaviors"
	xmlns:common="clr-namespace:VidCoderCommon.Model;assembly=VidCoderCommon"
	xmlns:controls="clr-namespace:VidCoder.Controls"
	xmlns:converters="clr-namespace:VidCoder.Converters"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:fluent="urn:fluent-ribbon"
	xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
	xmlns:interop="clr-namespace:HandBrake.Interop.Interop;assembly=HandBrake.Interop"
	xmlns:layoutPanels="clr-namespace:VidCoder.LayoutPanels"
	xmlns:local="clr-namespace:VidCoder"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:model="clr-namespace:VidCoder.Model"
	xmlns:res="clr-namespace:VidCoder.Resources"
	xmlns:tb="http://www.hardcodet.net/taskbar"
	xmlns:viewmodel="clr-namespace:VidCoder.ViewModel"
	Title="{Binding WindowTitle}"
	Width="680"
	Height="548"
	MinWidth="617"
	MinHeight="445"
	d:DataContext="{d:DesignInstance viewmodel:MainViewModel}"
	Background="{DynamicResource WindowBrush}"
	Closing="Main_OnClosing"
	Deactivated="OnWindowDeactivated"
	MouseDown="Window_MouseDown"
	SizeChanged="Main_OnSizeChanged"
	StateChanged="Window_StateChanged"
	Style="{StaticResource NormalWindow}"
	TextOptions.TextFormattingMode="Display"
	WindowStyle="None"
	mc:Ignorable="d">
	<WindowChrome.WindowChrome>
		<WindowChrome CaptionHeight="32" ResizeBorderThickness="{x:Static SystemParameters.WindowResizeBorderThickness}" />
	</WindowChrome.WindowChrome>
	<Window.Resources>
		<converters:SampleRateDisplayConverter x:Key="SampleRateDisplayConverter" />
		<converters:ChapterVMConverter x:Key="ChapterVMConverter" />
		<Style x:Key="MainSectionHeader" TargetType="TextBlock">
			<Setter Property="FontWeight" Value="Bold" />
			<Setter Property="FontSize" Value="14" />
			<Setter Property="Margin" Value="4" />
		</Style>
		<Style x:Key="PlainTitle" TargetType="TextBlock">
			<Setter Property="VerticalAlignment" Value="Center" />
			<Setter Property="Margin" Value="4 2 4 2" />
		</Style>
		<Style x:Key="MenuSeparatorStyle" TargetType="Rectangle">
			<Setter Property="Height" Value="1" />
			<Setter Property="Fill" Value="#CCCCCC" />
			<Setter Property="HorizontalAlignment" Value="Stretch" />
			<Setter Property="Margin" Value="30 3 0 3" />
		</Style>
		<Style x:Key="SourceTrack" TargetType="TextBlock">
			<Setter Property="Margin" Value="0 0 0 1" />
			<Setter Property="Foreground" Value="{DynamicResource WindowTextBrush}" />
			<Style.Triggers>
				<DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}}" Value="True">
					<Setter Property="Foreground" Value="{DynamicResource HighlightTextBrush}" />
				</DataTrigger>
				<DataTrigger Binding="{Binding Selected}" Value="True">
					<Setter Property="FontWeight" Value="Bold" />
				</DataTrigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="SourceSectionText" TargetType="TextBlock">
			<Setter Property="FontWeight" Value="Bold" />
			<Setter Property="FontSize" Value="13" />
			<Setter Property="VerticalAlignment" Value="Center" />
			<Setter Property="Margin" Value="0 0 8 0" />
		</Style>
		<Style x:Key="ArrowSeparator" TargetType="Polygon">
			<Setter Property="Points" Value="0,0 0,10 10,5" />
			<Setter Property="Fill" Value="{DynamicResource WindowTextBrush}" />
			<Setter Property="Margin" Value="8 0 8 0" />
			<Setter Property="VerticalAlignment" Value="Center" />
		</Style>
		<Style x:Key="SummaryActionButton" TargetType="Button">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="Button">
						<Border Name="buttonBorder" Background="Transparent">
							<ContentPresenter />
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter TargetName="buttonBorder" Property="Background" Value="{DynamicResource MouseOverOverlayBackgroundBrush}" />
							</Trigger>
							<Trigger Property="IsPressed" Value="True">
								<Setter TargetName="buttonBorder" Property="Background" Value="{DynamicResource PressedOverlayBackgroundBrush}" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Setter Property="Width" Value="30" />
			<Setter Property="Height" Value="30" />
			<Setter Property="VerticalAlignment" Value="Stretch" />
		</Style>
		<Style
			x:Key="ChapterComboBox"
			BasedOn="{StaticResource ComboBoxBaseStyle}"
			TargetType="ComboBox">
			<Setter Property="ItemTemplate">
				<Setter.Value>
					<DataTemplate>
						<TextBlock Text="{Binding ChapterNumber}" />
					</DataTemplate>
				</Setter.Value>
			</Setter>
			<Setter Property="Height" Value="23" />
			<Setter Property="VerticalAlignment" Value="Center" />
		</Style>
		<Style x:Key="RangeNumberBox" TargetType="FrameworkElement">
			<Setter Property="Height" Value="23" />
			<Setter Property="VerticalAlignment" Value="Center" />
		</Style>
		<Style x:Key="ScanStatus" TargetType="TextBlock">
			<Setter Property="FontSize" Value="16" />
		</Style>

		<Style
			x:Key="QueueText"
			BasedOn="{StaticResource ListViewTextBlockBaseStyle}"
			TargetType="TextBlock">
			<Style.Triggers>
				<DataTrigger Binding="{Binding Encoding}" Value="True">
					<Setter Property="Foreground" Value="{DynamicResource EncodingQueueItemTextBrush}" />
					<Setter Property="FontWeight" Value="Bold" />
				</DataTrigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="ListViewPathText" TargetType="{x:Type controls:PathTextBlock}">
			<Setter Property="Foreground" Value="{DynamicResource WindowTextBrush}" />
			<Style.Triggers>
				<DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}}" Value="True">
					<Setter Property="Foreground" Value="{DynamicResource HighlightTextBrush}" />
				</DataTrigger>
				<DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}}" Value="True">
					<Setter Property="Foreground" Value="{DynamicResource HighlightTextBrush}" />
				</DataTrigger>
			</Style.Triggers>
		</Style>
		<Style
			x:Key="QueuePathText"
			BasedOn="{StaticResource ListViewPathText}"
			TargetType="{x:Type controls:PathTextBlock}">
			<Style.Triggers>
				<DataTrigger Binding="{Binding Encoding}" Value="True">
					<Setter Property="Foreground" Value="{DynamicResource EncodingQueueItemTextBrush}" />
					<Setter Property="FontWeight" Value="Bold" />
				</DataTrigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="EncodeDetailsHeader" TargetType="TextBlock">
			<Setter Property="Height" Value="18" />
			<Setter Property="TextAlignment" Value="Right" />
		</Style>
		<Style x:Key="EncodeDetailsText" TargetType="TextBlock">
			<Setter Property="Margin" Value="5 0 0 0" />
		</Style>
		<Style x:Key="ChapterComboBoxItem" TargetType="ComboBoxItem">
			<Setter Property="Tag">
				<Setter.Value>
					<MultiBinding Converter="{StaticResource ChapterVMConverter}">
						<Binding Path="IsHighlighted" RelativeSource="{RelativeSource Self}" />
						<Binding />
					</MultiBinding>
				</Setter.Value>
			</Setter>
		</Style>
		<DataTemplate x:Key="QueueDragTemplate">
			<TextBlock Text="" />
		</DataTemplate>
		<DataTemplate x:Key="QueueTemplateSource" DataType="viewmodel:EncodeJobViewModel">
			<controls:PathTextBlock Style="{StaticResource QueuePathText}" Text="{Binding Job.SourcePath}" />
		</DataTemplate>
		<DataTemplate x:Key="QueueTemplateTitle" DataType="viewmodel:EncodeJobViewModel">
			<TextBlock Style="{StaticResource QueueText}" Text="{Binding Job.Title}" />
		</DataTemplate>
		<DataTemplate x:Key="QueueTemplateRange" DataType="viewmodel:EncodeJobViewModel">
			<TextBlock Style="{StaticResource QueueText}" Text="{Binding RangeDisplay}" />
		</DataTemplate>
		<DataTemplate x:Key="QueueTemplateDestination" DataType="viewmodel:EncodeJobViewModel">
			<controls:PathTextBlock Style="{StaticResource QueuePathText}" Text="{Binding Job.FinalOutputPath}" />
		</DataTemplate>
		<DataTemplate x:Key="QueueTemplateVideoEncoder" DataType="viewmodel:EncodeJobViewModel">
			<TextBlock Style="{StaticResource QueueText}" Text="{Binding VideoEncoderDisplay}" />
		</DataTemplate>
		<DataTemplate x:Key="QueueTemplateVideoQuality" DataType="viewmodel:EncodeJobViewModel">
			<TextBlock Style="{StaticResource QueueText}" Text="{Binding VideoQualityDisplay}" />
		</DataTemplate>
		<DataTemplate x:Key="QueueTemplateCropping" DataType="viewmodel:EncodeJobViewModel">
			<TextBlock Style="{StaticResource QueueText}" Text="{Binding CroppingDisplay}" />
		</DataTemplate>
		<DataTemplate x:Key="QueueTemplateOutputSize" DataType="viewmodel:EncodeJobViewModel">
			<TextBlock Style="{StaticResource QueueText}" Text="{Binding OutputSizeDisplay}" />
		</DataTemplate>
		<DataTemplate x:Key="QueueTemplateAudioEncoder" DataType="viewmodel:EncodeJobViewModel">
			<TextBlock Style="{StaticResource QueueText}" Text="{Binding AudioEncodersDisplay}" />
		</DataTemplate>
		<DataTemplate x:Key="QueueTemplateAudioQuality" DataType="viewmodel:EncodeJobViewModel">
			<TextBlock Style="{StaticResource QueueText}" Text="{Binding AudioQualityDisplay}" />
		</DataTemplate>
		<DataTemplate x:Key="QueueTemplateAudioTracks" DataType="viewmodel:EncodeJobViewModel">
			<TextBlock Style="{StaticResource QueueText}" Text="{Binding AudioTracksDisplay}" />
		</DataTemplate>
		<DataTemplate x:Key="QueueTemplateSubtitleTracks" DataType="viewmodel:EncodeJobViewModel">
			<TextBlock Style="{StaticResource QueueText}" Text="{Binding SubtitleTracksDisplay}" />
		</DataTemplate>
		<DataTemplate x:Key="QueueTemplateDuration" DataType="viewmodel:EncodeJobViewModel">
			<TextBlock Style="{StaticResource QueueText}" Text="{Binding DurationDisplay}" />
		</DataTemplate>
		<DataTemplate x:Key="QueueTemplatePreset" DataType="viewmodel:EncodeJobViewModel">
			<TextBlock Style="{StaticResource QueueText}" Text="{Binding PresetName}" />
		</DataTemplate>
		<DataTemplate x:Key="QueueRemoveTemplate">
			<Grid>
				<StackPanel Orientation="Horizontal" Visibility="{Binding ShowQueueEditButtons, Converter={StaticResource VisibilityConverter}}">
					<Button
						HorizontalAlignment="Left"
						VerticalAlignment="Center"
						Command="{Binding RemoveQueueJob}"
						Content="{x:Static res:MainRes.RemoveFromQueueToolTip}"
						Style="{StaticResource RemoveButtonStyle}" />
				</StackPanel>
				<ProgressBar
					Height="12"
					VerticalAlignment="Center"
					Background="{DynamicResource WindowBrush}"
					Foreground="{Binding ProcessingService.ProgressBarBrush}"
					ToolTip="{Binding ProgressToolTip}"
					ToolTipService.ShowDuration="120000"
					Visibility="{Binding ShowProgressBar,
					                     Converter={StaticResource VisibilityConverter}}"
					Value="{Binding PercentComplete,
					                Mode=OneWay}" />
			</Grid>
		</DataTemplate>
		<ContextMenu x:Key="CompletedItemContextMenu" d:DataContext="{d:DesignInstance viewmodel:EncodeResultViewModel}">
			<MenuItem Command="{Binding Play}" Header="{x:Static res:MainRes.Play}">
				<MenuItem.Icon>
					<Image
						Width="16"
						Height="16"
						Source="/Icons/play_small.png" />
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding Edit}" Header="{x:Static res:MainRes.Edit}">
				<MenuItem.Icon>
					<Image
						Width="16"
						Height="16"
						Source="/Icons/edit_16x16.png" />
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem
				Command="{Binding Compare}"
				Header="{x:Static res:MainRes.CompareAgainstOriginal}"
				Visibility="{Binding ShowCompare,
				                     Converter={StaticResource VisibilityConverter}}">
				<MenuItem.Icon>
					<Image
						Width="16"
						Height="16"
						Source="/Icons/Compare.png" />
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding OpenContainingFolder}" Header="{x:Static res:MainRes.OpenContainingFolder}">
				<MenuItem.Icon>
					<Image
						Width="16"
						Height="16"
						Source="/Icons/folder.png" />
				</MenuItem.Icon>
			</MenuItem>
			<Separator />
			<MenuItem Command="{Binding OpenLog}" Header="{x:Static res:MainRes.OpenLog}">
				<MenuItem.Icon>
					<Image
						Width="16"
						Height="16"
						Source="/Icons/text_file_16x16.png" />
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding CopyLog}" Header="{x:Static res:MainRes.CopyLog}">
				<MenuItem.Icon>
					<Image
						Width="16"
						Height="16"
						Source="/Icons/copy.png" />
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding CopyLogAndReportProblem}" Header="{x:Static res:MainRes.CopyLogAndReportMenuItem}" />
			<Separator />
			<MenuItem
				Command="{Binding ProcessingService.RetryFailed}"
				Header="{x:Static res:MainRes.RetryFailedItemsMenuItem}"
				Visibility="{Binding ProcessingService.HasFailedItems,
				                     Converter={StaticResource VisibilityConverter}}">
				<MenuItem.Icon>
					<Image
						Width="16"
						Height="16"
						Source="/Icons/Reload.png" />
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding ProcessingService.ClearCompleted}" Header="{x:Static res:MainRes.ClearCompleted}">
				<MenuItem.Icon>
					<Image
						Width="16"
						Height="16"
						Source="/Icons/Clear.png" />
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding ProcessingService.ClearSucceeded}" Header="{x:Static res:MainRes.ClearSucceededMenuItem}">
				<MenuItem.Icon>
					<Image
						Width="16"
						Height="16"
						Source="/Icons/ClearSucceeded.png" />
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem
				Command="{Binding ProcessingService.ClearFailed}"
				Header="{x:Static res:MainRes.ClearFailedMenuItem}"
				Visibility="{Binding ProcessingService.HasFailedItems,
				                     Converter={StaticResource VisibilityConverter}}">
				<MenuItem.Icon>
					<Image
						Width="16"
						Height="16"
						Source="/Icons/ClearFailed.png" />
				</MenuItem.Icon>
			</MenuItem>
		</ContextMenu>
		<Style
			x:Key="CompletedItemStyle"
			BasedOn="{StaticResource ListViewItemBaseStyle}"
			TargetType="ListViewItem">
			<EventSetter Event="MouseDoubleClick" Handler="HandleCompletedItemDoubleClick" />
			<Setter Property="ContextMenu" Value="{StaticResource CompletedItemContextMenu}" />
		</Style>
		<Storyboard x:Key="StatusTextStoryboard">
			<DoubleAnimation
				Storyboard.TargetName="StatusText"
				Storyboard.TargetProperty="Opacity"
				From="0"
				To="1"
				Duration="0:0:0.5" />
			<DoubleAnimation
				BeginTime="0:0:3.5"
				Storyboard.TargetName="StatusText"
				Storyboard.TargetProperty="Opacity"
				From="1"
				To="0"
				Duration="0:0:4" />
		</Storyboard>
		<PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z" />
		<Style x:Key="SourceSectionToggleButton" TargetType="{x:Type ToggleButton}">
			<Setter Property="Background" Value="Transparent" />
			<Setter Property="Height" Value="30" />
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
			<Setter Property="BorderThickness" Value="0" />
			<Setter Property="HorizontalContentAlignment" Value="Stretch" />
			<Setter Property="VerticalContentAlignment" Value="Center" />
			<Setter Property="Padding" Value="14 0 6 0" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border
							x:Name="border"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="true">
							<Grid Margin="{TemplateBinding Padding}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition />
								</Grid.ColumnDefinitions>
								<Path
									x:Name="ExpandPath"
									HorizontalAlignment="Left"
									VerticalAlignment="Center"
									Data="{StaticResource TreeArrow}"
									Fill="{DynamicResource TreeViewItem.TreeArrow.Static.Fill}"
									Stroke="{DynamicResource TreeViewItem.TreeArrow.Static.Stroke}"
									UseLayoutRounding="True">
									<Path.RenderTransform>
										<RotateTransform Angle="135" CenterX="3" CenterY="3" />
									</Path.RenderTransform>
								</Path>
								<ContentPresenter
									x:Name="contentPresenter"
									Grid.Column="1"
									Margin="6 0 0 0"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									Focusable="False"
									RecognizesAccessKey="True"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="True">
								<Setter TargetName="ExpandPath" Property="RenderTransform">
									<Setter.Value>
										<RotateTransform Angle="180" CenterX="3" CenterY="3" />
									</Setter.Value>
								</Setter>
								<Setter TargetName="ExpandPath" Property="Fill" Value="{DynamicResource TreeViewItem.TreeArrow.Static.Checked.Fill}" />
								<Setter TargetName="ExpandPath" Property="Stroke" Value="{DynamicResource TreeViewItem.TreeArrow.Static.Checked.Stroke}" />
							</Trigger>
							<Trigger Property="Button.IsDefaulted" Value="true">
								<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter TargetName="border" Property="Background" Value="{DynamicResource MouseOverBackgroundBrush}" />
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter TargetName="border" Property="Background" Value="{DynamicResource MouseOverBackgroundBrush}" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	</Window.Resources>
	<!--
		Working around bug where trying to set Window.TaskbarItemInfo throws an exception for some.
		This is now done in the .xaml.cs file.
	-->
	<!--<Window.TaskbarItemInfo>
		<TaskbarItemInfo ProgressState="{Binding TaskBarProgressTracker.ProgressState}" ProgressValue="{Binding TaskBarProgressTracker.ProgressFraction}" />
	</Window.TaskbarItemInfo>-->
	<Window.InputBindings>
		<KeyBinding
			Key="O"
			Command="{Binding OpenFile}"
			Modifiers="Control" />
		<KeyBinding
			Key="F"
			Command="{Binding OpenFolder}"
			Modifiers="Control" />
		<KeyBinding
			Key="Q"
			Command="{Binding ProcessingService.AddToQueue}"
			Modifiers="Control" />
		<KeyBinding
			Key="O"
			Command="{Binding ProcessingService.QueueFiles}"
			Modifiers="Control+Shift" />
		<KeyBinding
			Key="T"
			Command="{Binding ProcessingService.QueueTitlesAction}"
			Modifiers="Control" />
		<KeyBinding
			Key="W"
			Command="{Binding CloseVideoSource}"
			Modifiers="Control" />
		<KeyBinding
			Key="D"
			Command="{Binding OutputPathService.PickOutputPath}"
			Modifiers="Control" />
	</Window.InputBindings>

	<!--
		We need a separate root grid and content grid because the content can outgrow the
		original allocated size for it. We need to keep track of the window client area so we
		know how to restore it in a way that fits.
	-->
	<Border Name="rootGrid" Style="{StaticResource WindowMainPanelStyle}">
		<Grid Name="contentGrid">
			<Grid.RowDefinitions>
				<!--  Title bar  -->
				<RowDefinition Height="30" />

				<!--  Ribbon  -->
				<RowDefinition Height="Auto" />

				<!--  Source  -->
				<RowDefinition
					Name="sourceRow"
					Height="2*"
					MinHeight="160" />

				<!--  GridSplitter  -->
				<RowDefinition Height="4" />

				<!--  Below source pane  -->
				<RowDefinition
					Name="queueRow"
					Height="*"
					MinHeight="110" />
			</Grid.RowDefinitions>

			<TextBlock
				x:Name="screenReaderText"
				Height="0"
				AutomationProperties.LiveSetting="Assertive" />

			<!--  Title bar  -->
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" />
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto" />
					<ColumnDefinition Width="Auto" />
					<ColumnDefinition Width="Auto" />
				</Grid.ColumnDefinitions>
				<Grid.Style>
					<Style TargetType="Grid">
						<Style.Triggers>
							<DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="False">
								<Setter Property="Background" Value="{DynamicResource WindowTitleBarInactiveBackground}" />
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</Grid.Style>
				<Image
					Grid.Column="0"
					Width="22"
					Height="22"
					Margin="4"
					Source="/Icons/VidCoder32.png" />
				<TextBlock
					Grid.Column="1"
					Margin="4 0 0 1"
					VerticalAlignment="Center"
					FontSize="14"
					Text="{Binding WindowTitle}" />


				<Button
					Grid.Column="2"
					Click="OnMinimizeButtonClick"
					RenderOptions.EdgeMode="Aliased"
					Style="{StaticResource TitleBarButtonStyle}">
					<Path
						Width="46"
						Height="32"
						Data="M 18,15 H 28"
						Stroke="{Binding Path=Foreground,
						                 RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
						StrokeThickness="1" />
				</Button>
				<Button
					Name="maximizeButton"
					Grid.Column="3"
					Click="OnMaximizeRestoreButtonClick"
					Style="{StaticResource TitleBarButtonStyle}">
					<Path
						Width="46"
						Height="32"
						Data="M 18.5,10.5 H 27.5 V 19.5 H 18.5 Z"
						Stroke="{Binding Path=Foreground,
						                 RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
						StrokeThickness="1" />
				</Button>
				<Button
					Name="restoreButton"
					Grid.Column="3"
					Click="OnMaximizeRestoreButtonClick"
					Style="{StaticResource TitleBarButtonStyle}">
					<Path
						Width="46"
						Height="32"
						Data="M 18.5,12.5 H 25.5 V 19.5 H 18.5 Z M 20.5,12.5 V 10.5 H 27.5 V 17.5 H 25.5"
						Stroke="{Binding Path=Foreground,
						                 RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
						StrokeThickness="1" />
				</Button>
				<Button
					Grid.Column="4"
					Click="OnCloseButtonClick"
					Style="{StaticResource TitleBarCloseButtonStyle}">
					<Path
						Width="46"
						Height="32"
						Data="M 18,11 27,20 M 18,20 27,11"
						Stroke="{Binding Path=Foreground,
						                 RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
						StrokeThickness="1" />
				</Button>
			</Grid>

			<!--  Ribbon  -->
			<fluent:Ribbon
				Grid.Row="1"
				AreTabHeadersVisible="False"
				CanMinimize="False"
				IsQuickAccessToolBarVisible="False"
				IsToolBarVisible="False">
				<fluent:RibbonTabItem Header="">
					<fluent:RibbonGroupBox>
						<fluent:DropDownButton
							x:Name="openSourceButton"
							Header="{x:Static res:MainRes.OpenSourceRibbonButton}"
							LargeIcon="/Icons/Disc64.png">
							<fluent:MenuItem
								Command="{Binding OpenFile}"
								Header="{x:Static res:MainRes.OpenVideoFile}"
								Icon="/Icons/video-file.png"
								InputGestureText="Ctrl+O" />
							<fluent:MenuItem
								Command="{Binding OpenFolder}"
								Header="{x:Static res:MainRes.OpenDiscFolder}"
								Icon="/Icons/dvd_folder.png"
								InputGestureText="Ctrl+F" />
							<Rectangle Style="{StaticResource MenuSeparatorStyle}" />
							<fluent:MenuItem
								Command="{Binding OpenFolder}"
								Header="{x:Static res:MainRes.EnqueueFolderOfVideoFiles}"
								Icon="/Icons/video_files_folder.png" />
							<fluent:MenuItem
								Command="{Binding ProcessingService.QueueFiles}"
								Header="{x:Static res:MainRes.EnqueueMultipleFiles}"
								InputGestureText="Ctrl+Shift+O" />
						</fluent:DropDownButton>
					</fluent:RibbonGroupBox>
					<fluent:RibbonGroupBox Header="{x:Static res:MainRes.RibbonSettingsGroupLabel}">
						<fluent:Button
							AutomationProperties.Name="{x:Static res:MainRes.GlobalOptionsLabel}"
							Command="{Binding OpenOptions}"
							Header="{x:Static res:MainRes.GlobalOptionsLabel}"
							KeyTip="Ctrl+G"
							LargeIcon="/Icons/Options.png" />
						<fluent:SplitButton
							x:Name="presetButton"
							Command="{Binding OpenEncodingWindow}"
							Header="{Binding EncodingPresetButtonText}"
							LargeIcon="/Icons/EncodingSettings.png"
							MaxDropDownHeight="3000"
							ToolTip="{x:Static res:MainRes.EncodingSettingsButtonToolTip}">
							<controls:PresetTreeViewContainer x:Name="presetTreeViewContainer" MinWidth="250" />
						</fluent:SplitButton>
						<fluent:SplitButton
							x:Name="pickerButton"
							Command="{Binding OpenPickerWindow,
							                  Source={StaticResource WindowXamlHelper}}"
							Header="{Binding PickersService.PickerButtonText}"
							LargeIcon="/Icons/Picker.png"
							ToolTip="{x:Static res:PickerRes.PickerHelpText}">
							<controls:PickerList MinWidth="250" ItemMouseUp="OnPickerItemMouseUp" />
						</fluent:SplitButton>
					</fluent:RibbonGroupBox>
					<fluent:RibbonGroupBox Header="{x:Static res:MainRes.RibbonEncodingGroupLabel}">
						<fluent:Button
							Command="{Binding OpenPreviewWindow,
							                  Source={StaticResource WindowXamlHelper}}"
							Header="{x:Static res:CommonRes.PreviewLabel}"
							KeyTip="Ctrl+P"
							LargeIcon="/Icons/Preview64.png"
							Visibility="{Binding PreviewWindowOpen,
							                     Source={StaticResource WindowXamlHelper},
							                     Converter={StaticResource InverseVisibilityConverter}}" />
						<fluent:SplitButton
							Command="{Binding ProcessingService.AddToQueue}"
							Header="{x:Static res:MainRes.AddToQueueLabel}"
							LargeIcon="/Icons/AddToQueue.png"
							SizeDefinition="Large"
							Visibility="{Binding ProcessingService.CanTryEnqueueMultipleTitles,
							                     Converter={StaticResource VisibilityConverter}}">
							<fluent:MenuItem
								Command="{Binding ProcessingService.AddToQueue}"
								Header="{x:Static res:MainRes.AddToQueueLabel}"
								InputGestureText="Ctrl+Q" />
							<fluent:MenuItem
								Command="{Binding ProcessingService.QueueTitlesAction}"
								Header="{x:Static res:MainRes.AddMultipleTitlesToQueueLabel}"
								InputGestureText="Ctrl+T" />
						</fluent:SplitButton>
						<fluent:Button
							Command="{Binding ProcessingService.AddToQueue}"
							Header="{x:Static res:MainRes.AddToQueueLabel}"
							LargeIcon="/Icons/AddToQueue.png"
							SizeDefinition="Large"
							Visibility="{Binding ProcessingService.CanTryEnqueueMultipleTitles,
							                     Converter={StaticResource InverseVisibilityConverter}}" />
						<fluent:Button
							Command="{Binding ProcessingService.Encode}"
							Header="{Binding ProcessingService.EncodeButtonText}"
							KeyTip="F5"
							LargeIcon="/Icons/Encode.png"
							SizeDefinition="Large"
							Visibility="{Binding ProcessingService.PauseVisible,
							                     Converter={StaticResource InverseVisibilityConverter}}" />

						<fluent:Button
							Command="{Binding ProcessingService.Pause}"
							Header="{x:Static res:MainRes.Pause}"
							LargeIcon="/Icons/Pause.png"
							SizeDefinition="Large"
							Visibility="{Binding ProcessingService.PauseVisible,
							                     Converter={StaticResource VisibilityConverter}}" />

						<fluent:Button
							Command="{Binding ProcessingService.StopEncode}"
							Header="{x:Static res:MainRes.Stop}"
							LargeIcon="/Icons/Stop.png"
							Visibility="{Binding ProcessingService.Encoding,
							                     Converter={StaticResource VisibilityConverter}}" />
					</fluent:RibbonGroupBox>
					<fluent:RibbonGroupBox x:Name="toolsRibbonGroupBox">
						<fluent:DropDownButton
							x:Name="windowsRibbonButton"
							Header="{x:Static res:MainRes.WindowsMenu}"
							ItemsSource="{Binding WindowMenuItems}"
							LargeIcon="/Icons/Windows.png"
							Size="Large">
							<fluent:DropDownButton.ItemContainerStyle>
								<Style TargetType="fluent:MenuItem">
									<Setter Property="Header" Value="{Binding Definition.MenuLabel}" />
									<Setter Property="IsCheckable" Value="True" />
									<Setter Property="IsChecked" Value="{Binding IsOpen}" />
									<Setter Property="IsEnabled" Value="{Binding CanOpen}" />
									<Setter Property="InputGestureText" Value="{Binding Definition.InputGestureText}" />
									<Setter Property="Command" Value="{Binding Command}" />
								</Style>
							</fluent:DropDownButton.ItemContainerStyle>
						</fluent:DropDownButton>
						<fluent:DropDownButton Header="{x:Static res:MainRes.ImportExportRibbonButton}" LargeIcon="/Icons/ImportExport.png">
							<fluent:MenuItem Command="{Binding ImportPreset}" Header="{x:Static res:MainRes.ImportPreset}" />
							<fluent:MenuItem Command="{Binding ExportPreset}" Header="{x:Static res:MainRes.ExportPreset}" />
							<Rectangle Style="{StaticResource MenuSeparatorStyle}" />
							<fluent:MenuItem Command="{Binding ProcessingService.ImportQueue}" Header="{x:Static res:MainRes.ImportQueue}" />
							<fluent:MenuItem
								Command="{Binding ProcessingService.ExportQueue}"
								Header="{x:Static res:MainRes.ExportQueue}"
								IsEnabled="{Binding ProcessingService.QueueHasItems}" />
						</fluent:DropDownButton>
						<fluent:DropDownButton
							Header="{x:Static res:MainRes.HelpMenu}"
							LargeIcon="/Icons/Help.png"
							Size="Large">
							<fluent:MenuItem Command="{Binding OpenHomepage}" Header="{x:Static res:MainRes.VidCoderHomepageMenuItem}" />
							<fluent:MenuItem Command="{Binding ReportBug}" Header="{x:Static res:MainRes.ReportABugMenuItem}" />
							<fluent:MenuItem Command="{Binding RequestFeature}" Header="{x:Static res:MainRes.RequestFeatureMenuItem}" />
							<Rectangle Style="{StaticResource MenuSeparatorStyle}" />
							<fluent:MenuItem Command="{Binding OpenAppData}" Header="{x:Static res:MainRes.OpenAppDataFolder}" />
							<Rectangle Style="{StaticResource MenuSeparatorStyle}" Visibility="{Binding ShowUpdateMenuItem, Converter={StaticResource VisibilityConverter}}" />
							<fluent:MenuItem
								Command="{Binding OpenUpdates}"
								Header="{x:Static res:MainRes.UpdatesMenuItem}"
								Visibility="{Binding ShowUpdateMenuItem,
								                     Converter={StaticResource VisibilityConverter}}" />
							<Rectangle Style="{StaticResource MenuSeparatorStyle}" />
							<fluent:MenuItem
								Command="{Binding OpenAboutDialog}"
								Header="{x:Static res:MainRes.AboutVidCoderMenuItem}"
								Icon="/Icons/VidCoder32.png" />
						</fluent:DropDownButton>
					</fluent:RibbonGroupBox>
				</fluent:RibbonTabItem>
			</fluent:Ribbon>

			<!--  Video choices on load  -->
			<Grid
				Grid.Row="2"
				MinWidth="220"
				Margin="0"
				VerticalAlignment="Stretch"
				Background="{DynamicResource AlternateBackgroundBrush}"
				Visibility="{Binding VideoSourceState,
				                     Converter={StaticResource EnumVisibilityConverter},
				                     ConverterParameter={x:Static model:VideoSourceState.Choices}}">
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition />
				</Grid.RowDefinitions>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" />
					<ColumnDefinition />
				</Grid.ColumnDefinitions>
				<Grid>
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition />
					</Grid.RowDefinitions>

					<TextBlock
						Margin="22 16 0 1"
						Style="{StaticResource DescriptiveText}"
						Text="{x:Static res:MainRes.OpenSourceLabel}" />
					<ItemsControl
						Grid.Row="1"
						MinWidth="220"
						MinHeight="105"
						Focusable="False"
						ItemsSource="{Binding SourceOptions}">
						<ItemsControl.ItemTemplate>
							<DataTemplate>
								<Button
									Padding="16 6 16 6"
									HorizontalContentAlignment="Left"
									AutomationProperties.Name="{Binding Text}"
									Command="{Binding ChooseSource}"
									Style="{StaticResource BorderlessButtonStyle}"
									UseLayoutRounding="True">
									<StackPanel Orientation="Horizontal">
										<Image
											Width="16"
											Height="16"
											Margin="0 2 0 2"
											Source="{Binding Image}" />
										<TextBlock
											Margin="6 0 0 0"
											FontSize="14"
											Style="{StaticResource PlainTitle}"
											Text="{Binding Text}" />
									</StackPanel>
								</Button>
							</DataTemplate>
						</ItemsControl.ItemTemplate>
						<ItemsControl.Template>
							<ControlTemplate>
								<StackPanel
									Margin="2"
									IsItemsHost="True"
									Orientation="Vertical" />
							</ControlTemplate>
						</ItemsControl.Template>
					</ItemsControl>
				</Grid>

				<Grid
					Grid.Row="0"
					Grid.Column="1"
					Margin="8 14 0 0">
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
						<RowDefinition MinHeight="20" />
					</Grid.RowDefinitions>

					<StackPanel Orientation="Horizontal" Visibility="{Binding RecentSourcesVisible, Converter={StaticResource VisibilityConverter}}">
						<TextBlock
							Margin="10 0 0 1"
							Style="{StaticResource DescriptiveText}"
							Text="{x:Static res:MainRes.Recent}" />

						<Button
							Width="20"
							Height="20"
							Margin="4 0 0 0"
							HorizontalAlignment="Right"
							VerticalAlignment="Top"
							Command="{Binding ClearRecentFiles}"
							Content="{x:Static res:MainRes.ClearRecentFilesButtonToolTip}"
							Style="{StaticResource RemoveButtonStyle}" />
					</StackPanel>

					<ItemsControl
						Grid.Row="1"
						MinWidth="220"
						Margin="0 4 0 0"
						Focusable="False"
						ItemsSource="{Binding RecentSourceOptions}"
						Visibility="{Binding RecentSourcesVisible,
						                     Converter={StaticResource VisibilityConverter}}">
						<ItemsControl.ItemTemplate>
							<DataTemplate>
								<Button
									Padding="0 0 16 0"
									HorizontalContentAlignment="Left"
									AutomationProperties.Name="{Binding Text}"
									Command="{Binding ChooseSource}"
									Style="{StaticResource BorderlessButtonStyle}">
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition />
										</Grid.ColumnDefinitions>
										<Image
											Grid.Column="0"
											Width="16"
											Height="16"
											Margin="4 2 0 2"
											Source="{Binding Image}"
											UseLayoutRounding="True" />
										<controls:PathTextBlock
											Grid.Column="1"
											Margin="4"
											Text="{Binding Text,
											               Mode=OneWay}" />
									</Grid>
								</Button>
							</DataTemplate>
						</ItemsControl.ItemTemplate>
						<ItemsControl.Template>
							<ControlTemplate>
								<StackPanel IsItemsHost="True" Orientation="Vertical" />
							</ControlTemplate>
						</ItemsControl.Template>
					</ItemsControl>
				</Grid>
				<TextBlock
					Grid.Row="1"
					Grid.Column="0"
					Grid.ColumnSpan="2"
					HorizontalAlignment="Center"
					VerticalAlignment="Center"
					Style="{StaticResource DescriptiveText}"
					Text="{x:Static res:MainRes.DragFilesHereLabel}" />
			</Grid>

			<!--  Source area  -->
			<ScrollViewer
				Name="sourceScrollViewer"
				Grid.Row="2"
				Margin="0"
				Background="{DynamicResource AlternateBackgroundBrush}"
				VerticalScrollBarVisibility="Auto"
				Visibility="{Binding VideoSourceState,
				                     Converter={StaticResource EnumVisibilityConverter},
				                     ConverterParameter={x:Static model:VideoSourceState.ScannedSource}}">
				<!--  Video, audio, subtitles, chapters grid  -->
				<Grid Margin="0 8 0 0" VerticalAlignment="Top">
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" MinHeight="0" />
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
					</Grid.RowDefinitions>

					<!--  Video Header  -->
					<Grid Grid.Row="0">
						<Grid.ColumnDefinitions>
							<ColumnDefinition />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>

						<ToggleButton
							Grid.Column="0"
							AutomationProperties.Name="{Binding SourceText}"
							IsChecked="{Binding VideoExpanded}"
							Style="{StaticResource SourceSectionToggleButton}"
							UseLayoutRounding="True">
							<Grid Grid.Row="0" Grid.Column="1">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Name="videoSummaryColumn" />
								</Grid.ColumnDefinitions>
								<Image
									Grid.Column="0"
									Width="16"
									Height="16"
									Margin="0 0 0 0"
									VerticalAlignment="Center"
									Source="{Binding SourceIcon}"
									Visibility="{Binding SourceIconVisible,
									                     Converter={StaticResource VisibilityConverter}}" />

								<Grid Grid.Column="1">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition />
									</Grid.ColumnDefinitions>
									<!--  Source  -->
									<controls:PathTextBlock
										x:Name="sourceText"
										Grid.Column="0"
										Margin="4 0 4 0"
										VerticalAlignment="Center"
										FontSize="13"
										FontWeight="Bold"
										Text="{Binding SourceText,
										               Mode=OneWay}" />

									<StackPanel
										Name="videoTitleAngle"
										Grid.Column="1"
										HorizontalAlignment="Left"
										Orientation="Horizontal"
										SizeChanged="VideoTitleAngle_OnSizeChanged">
										<!--  Title  -->
										<StackPanel Orientation="Horizontal" Visibility="{Binding TitleVisible, Converter={StaticResource VisibilityConverter}}">
											<Polygon Style="{StaticResource ArrowSeparator}" />
											<TextBlock
												Margin="0 0 4 0"
												VerticalAlignment="Center"
												Text="{x:Static res:MainRes.TitleLabel}" />
											<ComboBox
												Height="23"
												MinWidth="102"
												VerticalAlignment="Center"
												ItemsSource="{Binding Titles}"
												SelectedItem="{Binding SelectedTitle}" />

											<Image
												Height="18"
												Margin="6 0 0 0"
												VerticalAlignment="Center"
												Source="/Icons/warning.png"
												ToolTip="{Binding TitleWarning}"
												ToolTipService.InitialShowDelay="0"
												Visibility="{Binding TitleWarningVisible,
												                     Converter={StaticResource VisibilityConverter}}" />

										</StackPanel>

										<!--  Angle  -->
										<StackPanel Orientation="Horizontal" Visibility="{Binding AngleVisible, Converter={StaticResource VisibilityConverter}}">
											<Polygon Style="{StaticResource ArrowSeparator}" />
											<TextBlock VerticalAlignment="Center" Text="{x:Static res:MainRes.AngleLabel}" />
											<ComboBox
												Height="23"
												Margin="4 0 0 0"
												VerticalAlignment="Center"
												ItemsSource="{Binding Angles}"
												SelectedItem="{Binding Angle}" />
										</StackPanel>

										<!--  Video options button  -->
										<Button
											Margin="10 0 0 0"
											AutomationProperties.Name="{x:Static res:MainRes.VideoEncodingOptionsToolTip}"
											Command="{Binding OpenVideoEncoderOptions}"
											Style="{StaticResource SummaryActionButton}"
											ToolTip="{x:Static res:MainRes.VideoEncodingOptionsToolTip}">
											<Image
												Width="20"
												Height="20"
												HorizontalAlignment="Center"
												VerticalAlignment="Center"
												Source="/Icons/Options.png" />
										</Button>
									</StackPanel>
								</Grid>


							</Grid>
						</ToggleButton>

						<!--  Close video source button  -->
						<Button
							Grid.Column="1"
							Width="38"
							Height="38"
							Margin="0 -8 0 0"
							HorizontalAlignment="Right"
							VerticalAlignment="Top"
							Command="{Binding CloseVideoSource}"
							Content="{x:Static res:MainRes.CloseVideoSourceToolTip}"
							Style="{StaticResource RemoveButtonStyle}"
							Visibility="{Binding CanCloseVideoSource,
							                     Converter={StaticResource VisibilityConverter}}" />
					</Grid>

					<!--  Video Detail  -->
					<Grid
						Grid.Row="1"
						Height="110"
						Margin="0 0 0 0"
						Visibility="{Binding VideoExpanded,
						                     Converter={StaticResource VisibilityConverter}}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>

						<Grid Grid.Column="0" Margin="16 3 10 0">
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
								<RowDefinition />
							</Grid.RowDefinitions>

							<StackPanel
								Name="rangeUI"
								Grid.Row="0"
								Background="Transparent"
								Orientation="Horizontal">
								<!--  Range type  -->
								<ComboBox
									Height="23"
									MinWidth="92"
									Margin="0 0 10 0"
									HorizontalAlignment="Left"
									VerticalAlignment="Center"
									ItemsSource="{Binding RangeTypeChoices}"
									SelectedValue="{Binding RangeType}"
									SelectedValuePath="Value" />

								<!--  Chapters range  -->
								<StackPanel Orientation="Horizontal" Visibility="{Binding RangeType, Converter={StaticResource EnumVisibilityConverter}, ConverterParameter={x:Static common:VideoRangeType.Chapters}}">
									<ComboBox
										MinWidth="40"
										AutomationProperties.Name="{x:Static res:MainRes.StartChapterAutomationName}"
										ItemContainerStyle="{StaticResource ChapterComboBoxItem}"
										ItemsSource="{Binding StartChapters}"
										SelectedItem="{Binding SelectedStartChapter}"
										Style="{StaticResource ChapterComboBox}" />
									<TextBlock Style="{StaticResource PlainTitle}" Text="-" />
									<ComboBox
										MinWidth="40"
										AutomationProperties.Name="{x:Static res:MainRes.EndChapterAutomationName}"
										ItemContainerStyle="{StaticResource ChapterComboBoxItem}"
										ItemsSource="{Binding EndChapters}"
										SelectedItem="{Binding SelectedEndChapter}"
										Style="{StaticResource ChapterComboBox}" />
								</StackPanel>

								<!--  Time range  -->
								<StackPanel
									VerticalAlignment="Center"
									Orientation="Horizontal"
									Visibility="{Binding RangeType,
									                     Converter={StaticResource EnumVisibilityConverter},
									                     ConverterParameter={x:Static common:VideoRangeType.Seconds}}">
									<controls:TimeBox
										Width="46"
										Height="22"
										GotFocus="StartTimeGotFocus"
										Maximum="{Binding SelectedTitle.Duration}"
										Style="{StaticResource RangeNumberBox}"
										Time="{Binding TimeRangeStart,
										               Mode=TwoWay}" />
									<TextBlock Style="{StaticResource PlainTitle}" Text="-" />
									<controls:TimeBox
										Width="46"
										Height="22"
										GotFocus="EndTimeGotFocus"
										Maximum="{Binding SelectedTitle.Duration}"
										Style="{StaticResource RangeNumberBox}"
										Time="{Binding TimeRangeEnd,
										               Mode=TwoWay}" />
								</StackPanel>

								<!--  Frames range  -->
								<StackPanel Orientation="Horizontal" Visibility="{Binding RangeType, Converter={StaticResource EnumVisibilityConverter}, ConverterParameter={x:Static common:VideoRangeType.Frames}}">
									<controls:NumberBox
										Width="65"
										AllowEmpty="False"
										GotFocus="FramesStartGotFocus"
										Minimum="0"
										Number="{Binding FramesRangeStart,
										                 Mode=TwoWay}"
										Style="{StaticResource RangeNumberBox}" />
									<TextBlock Style="{StaticResource PlainTitle}" Text="-" />
									<controls:NumberBox
										Width="65"
										AllowEmpty="False"
										GotFocus="FramesEndGotFocus"
										Minimum="1"
										Number="{Binding FramesRangeEnd,
										                 Mode=TwoWay}"
										Style="{StaticResource RangeNumberBox}" />
								</StackPanel>
								<TextBlock Style="{StaticResource PlainTitle}" Text="{Binding TotalChaptersText}" />
							</StackPanel>
							<Grid Grid.Row="1">
								<Grid.ColumnDefinitions>
									<ColumnDefinition />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>

								<controls:RangeBar
									Title="{Binding SelectedTitle.Title}"
									Grid.Column="0"
									Height="20"
									Margin="0 6 0 0"
									HorizontalAlignment="Stretch"
									VerticalAlignment="Center"
									ChaptersEnabled="{Binding UsingChaptersRange}"
									EndChapter="{Binding ChapterPreviewEnd,
									                     Mode=TwoWay}"
									EndTime="{Binding TimeRangeEndBar,
									                  Mode=TwoWay}"
									StartChapter="{Binding ChapterPreviewStart,
									                       Mode=TwoWay}"
									StartTime="{Binding TimeRangeStartBar,
									                    Mode=TwoWay}"
									ToolTip="{x:Static res:MainRes.RangeBarToolTip}"
									Visibility="{Binding RangeBarVisible,
									                     Converter={StaticResource VisibilityConverter}}" />

								<!--  Range preview text  -->
								<StackPanel
									Grid.Column="1"
									Margin="6 0 0 0"
									HorizontalAlignment="Right"
									VerticalAlignment="Center"
									Orientation="Horizontal"
									Visibility="{Binding RangeBarVisible,
									                     Converter={StaticResource VisibilityConverter}}">
									<TextBlock VerticalAlignment="Bottom" Text="{Binding RangePreviewText}" />
									<TextBlock
										Margin="10 0 0 0"
										VerticalAlignment="Bottom"
										Text="{Binding RangePreviewLengthText}" />
								</StackPanel>
							</Grid>
							<Grid Grid.Row="2" Margin="0 6 0 0">
								<ItemsControl
									Margin="0 0 0 0"
									Focusable="False"
									ItemsSource="{Binding VideoDetails}">
									<ItemsControl.ItemsPanel>
										<ItemsPanelTemplate>
											<WrapPanel Orientation="Vertical" />
										</ItemsPanelTemplate>
									</ItemsControl.ItemsPanel>
									<ItemsControl.ItemTemplate>
										<DataTemplate>
											<StackPanel Orientation="Horizontal">
												<TextBlock Text="{Binding Label}" />
												<TextBlock
													Margin="4 0 12 0"
													FontWeight="SemiBold"
													Text="{Binding Value}" />
											</StackPanel>
										</DataTemplate>
									</ItemsControl.ItemTemplate>
								</ItemsControl>
							</Grid>
						</Grid>

						<Grid Name="miniPreviewFrameHolder" Grid.Column="1">
							<Grid.Resources>
								<Style x:Key="MiniPreviewPaddleButton" TargetType="Button">
									<Setter Property="Width" Value="40" />
									<Setter Property="Visibility" Value="Collapsed" />
									<Setter Property="Foreground" Value="White" />
									<Setter Property="FontSize" Value="30" />
									<Setter Property="FontWeight" Value="Bold" />
									<Setter Property="Template">
										<Setter.Value>
											<ControlTemplate TargetType="{x:Type Button}">
												<Border
													x:Name="border"
													Background="#44000000"
													BorderThickness="0"
													SnapsToDevicePixels="true">
													<ContentPresenter
														x:Name="contentPresenter"
														Margin="{TemplateBinding Padding}"
														HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
														VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
														Focusable="False"
														RecognizesAccessKey="True"
														SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
												</Border>
												<ControlTemplate.Triggers>
													<Trigger Property="IsMouseOver" Value="true">
														<Setter TargetName="border" Property="Background" Value="#AA000000" />
													</Trigger>
													<Trigger Property="IsPressed" Value="true">
														<Setter TargetName="border" Property="Background" Value="Black" />
													</Trigger>
													<Trigger Property="IsEnabled" Value="false">
														<Setter TargetName="border" Property="Visibility" Value="Collapsed" />
													</Trigger>
												</ControlTemplate.Triggers>
											</ControlTemplate>
										</Setter.Value>
									</Setter>
									<Style.Triggers>
										<DataTrigger Binding="{Binding IsMouseOver, ElementName=miniPreviewFrameHolder}" Value="True">
											<Setter Property="Visibility" Value="Visible" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</Grid.Resources>
							<controls:PaddingFrame
								x:Name="miniPreviewFrame"
								Width="200"
								HorizontalAlignment="Stretch"
								HorizontalContentAlignment="Stretch"
								OutputSize="{Binding OutputSizeService.Size}"
								PadColor="{Binding PreviewImageService.PadColor}"
								Source="{Binding PreviewImageServiceClient.PreviewImage}" />

							<Button
								HorizontalAlignment="Left"
								Command="{Binding ShowPreviousPreview}"
								Content="‹"
								Style="{StaticResource MiniPreviewPaddleButton}" />
							<Button
								HorizontalAlignment="Right"
								Command="{Binding ShowNextPreview}"
								Content="›"
								Style="{StaticResource MiniPreviewPaddleButton}" />
						</Grid>

					</Grid>


					<!--  Audio Header  -->
					<ToggleButton
						Grid.Row="2"
						AutomationProperties.Name="{Binding AudioSummary}"
						IsChecked="{Binding AudioExpanded}"
						Style="{StaticResource SourceSectionToggleButton}">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Name="audioSummaryColumn" />
							</Grid.ColumnDefinitions>
							<Image
								Width="16"
								Height="16"
								Source="/Icons/Audio.png" />
							<StackPanel Grid.Column="1" Orientation="Horizontal">
								<TextBlock
									Name="audioSummary"
									Margin="6 0 0 2"
									Style="{StaticResource SourceSectionText}"
									Text="{Binding AudioSummary}"
									TextTrimming="CharacterEllipsis" />

								<!--  Options button  -->
								<Button
									Margin="10 0 0 0"
									AutomationProperties.Name="{x:Static res:MainRes.AudioEncodingOptionsToolTip}"
									Command="{Binding OpenAudioEncoderOptions}"
									Style="{StaticResource SummaryActionButton}"
									ToolTip="{x:Static res:MainRes.AudioEncodingOptionsToolTip}">
									<Image
										Width="20"
										Height="20"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Source="/Icons/Options.png" />
								</Button>

								<!--  Audio picker button  -->
								<Button
									Margin="0"
									AutomationProperties.Name="{x:Static res:MainRes.AudioPickerButtonToolTip}"
									Command="{Binding OpenPickerToAudio}"
									Style="{StaticResource SummaryActionButton}"
									ToolTip="{x:Static res:MainRes.AudioPickerButtonToolTip}">
									<Image
										Width="20"
										Height="20"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Source="/Icons/Picker.png" />
								</Button>
							</StackPanel>
						</Grid>
					</ToggleButton>

					<!--  Audio detail  -->
					<StackPanel
						Grid.Row="3"
						Orientation="Vertical"
						Visibility="{Binding AudioExpanded,
						                     Converter={StaticResource VisibilityConverter}}">
						<TextBlock
							Margin="16 0 0 0"
							HorizontalAlignment="Left"
							VerticalAlignment="Top"
							Text="{x:Static res:MainRes.NoAudioDescription}"
							Visibility="{Binding HasAudio,
							                     Converter={StaticResource InverseVisibilityConverter}}" />
						<ListView
							Margin="-1 0 -1 0"
							VerticalAlignment="Top"
							VidCoderDragDrop:DragDropHelper.IsDragSource="True"
							VidCoderDragDrop:DragDropHelper.IsDropTarget="True"
							VidCoderDragDrop:DragDropHelper.SourceList="{Binding AudioTracks}"
							ItemsSource="{Binding AudioTracksBindable}"
							UseLayoutRounding="True"
							Visibility="{Binding HasAudio,
							                     Converter={StaticResource VisibilityConverter}}">
							<VidCoderDragDrop:DragDropHelper.DragDropTemplate>
								<DataTemplate>
									<TextBlock Background="White" Text="{Binding Display, Mode=OneWay}" />
								</DataTemplate>
							</VidCoderDragDrop:DragDropHelper.DragDropTemplate>
							<i:Interaction.Behaviors>
								<behaviors:IgnoreMouseWheelBehavior />
							</i:Interaction.Behaviors>
							<ListView.ItemContainerStyle>
								<Style BasedOn="{StaticResource ListViewItemNoSelectionStyle}" TargetType="ListViewItem">
									<EventSetter Event="PreviewMouseLeftButtonDown" Handler="AudioMouseDown" />
									<EventSetter Event="MouseLeftButtonUp" Handler="AudioMouseUp" />
									<EventSetter Event="KeyDown" Handler="OnAudioItemKeyPress" />
								</Style>
							</ListView.ItemContainerStyle>
							<ListView.View>
								<GridView>
									<GridView.Columns>
										<GridViewColumn x:Name="audioSelectedColumn">
											<GridViewColumn.CellTemplate>
												<DataTemplate DataType="viewmodel:AudioTrackViewModel">
													<CheckBox
														Width="22"
														Height="22"
														HorizontalAlignment="Stretch"
														VerticalAlignment="Stretch"
														HorizontalContentAlignment="Center"
														VerticalContentAlignment="Center"
														AutomationProperties.LiveSetting="Assertive"
														IsChecked="{Binding Selected}"
														Style="{StaticResource CheckBoxCenteredStyle}" />
												</DataTemplate>
											</GridViewColumn.CellTemplate>
										</GridViewColumn>
										<GridViewColumn x:Name="audioTrackSummaryColumn" Header="{x:Static res:MainRes.AudioSubtitleTrackColumnHeader}">
											<GridViewColumn.CellTemplate>
												<DataTemplate DataType="viewmodel:AudioTrackViewModel">
													<TextBlock
														VerticalAlignment="Center"
														Style="{StaticResource SourceTrack}"
														Text="{Binding TrackSummary}" />
												</DataTemplate>
											</GridViewColumn.CellTemplate>
										</GridViewColumn>
										<GridViewColumn x:Name="audioNameColumn" Header="{x:Static res:SubtitleRes.NameColumn}">
											<GridViewColumn.CellTemplate>
												<DataTemplate DataType="viewmodel:AudioTrackViewModel">
													<Grid>
														<TextBlock
															Style="{StaticResource SourceTrack}"
															Text="{Binding SourceName}"
															Visibility="{Binding Selected,
															                     Converter={StaticResource InverseVisibilityConverter}}" />
														<TextBox
															Height="22"
															MinWidth="100"
															Margin="0"
															VerticalContentAlignment="Center"
															AutomationProperties.Name="{x:Static res:MainRes.AudioTrackNameAutomationName}"
															Text="{Binding Name,
															               UpdateSourceTrigger=PropertyChanged}"
															Visibility="{Binding Selected,
															                     Converter={StaticResource VisibilityConverter}}" />
													</Grid>
												</DataTemplate>
											</GridViewColumn.CellTemplate>
										</GridViewColumn>
										<GridViewColumn x:Name="audioBitrateColumn" Header="{x:Static res:MainRes.BitrateColumn}">
											<GridViewColumn.CellTemplate>
												<DataTemplate DataType="viewmodel:AudioTrackViewModel">
													<TextBlock
														MinWidth="40"
														VerticalAlignment="Center"
														Style="{StaticResource SourceTrack}"
														Text="{Binding SourceBitrate}" />
												</DataTemplate>
											</GridViewColumn.CellTemplate>
										</GridViewColumn>
										<GridViewColumn x:Name="audioSampleRateColumn" Header="{x:Static res:MainRes.SampleRateColumn}">
											<GridViewColumn.CellTemplate>
												<DataTemplate DataType="viewmodel:AudioTrackViewModel">
													<TextBlock
														MinWidth="65"
														VerticalAlignment="Center"
														Style="{StaticResource SourceTrack}"
														Text="{Binding AudioTrack.SampleRate,
														               Converter={StaticResource SampleRateDisplayConverter}}" />
												</DataTemplate>
											</GridViewColumn.CellTemplate>
										</GridViewColumn>
										<GridViewColumn x:Name="audioRemoveDuplicateColumn">
											<GridViewColumn.CellTemplate>
												<DataTemplate DataType="viewmodel:AudioTrackViewModel">
													<Grid>
														<Button
															VerticalAlignment="Center"
															Command="{Binding Remove}"
															Content="{x:Static res:CommonRes.RemoveTrack}"
															Style="{StaticResource RemoveButtonStyle}"
															Visibility="{Binding RemoveVisible,
															                     Converter={StaticResource VisibilityConverter}}" />
														<Button
															VerticalContentAlignment="Center"
															Command="{Binding Duplicate}"
															Content="{x:Static res:CommonRes.DuplicateTrack}"
															Style="{StaticResource AddButtonStyle}"
															Visibility="{Binding DuplicateVisible,
															                     Converter={StaticResource VisibilityConverter}}" />
													</Grid>
												</DataTemplate>
											</GridViewColumn.CellTemplate>
										</GridViewColumn>
									</GridView.Columns>
								</GridView>
							</ListView.View>
						</ListView>
					</StackPanel>



					<!--  Subtitles header  -->
					<ToggleButton
						Grid.Row="4"
						AutomationProperties.Name="{Binding SubtitlesSummary}"
						IsChecked="{Binding SubtitlesExpanded}"
						Style="{StaticResource SourceSectionToggleButton}">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Name="subtitlesSummaryColumn" Width="*" />
							</Grid.ColumnDefinitions>
							<Image
								Width="16"
								Height="16"
								Source="/Icons/Subtitles.png" />
							<StackPanel Grid.Column="1" Orientation="Horizontal">
								<TextBlock
									Name="subtitlesSummary"
									Margin="6 0 0 2"
									Style="{StaticResource SourceSectionText}"
									Text="{Binding SubtitlesSummary}"
									TextTrimming="CharacterEllipsis" />
								<!--  Add subtitle button  -->
								<Button
									Margin="10 0 0 0"
									AutomationProperties.Name="{x:Static res:SubtitleRes.ImportSubtitleButton}"
									Command="{Binding AddFileSubtitle}"
									Style="{StaticResource SummaryActionButton}"
									ToolTip="{x:Static res:SubtitleRes.ImportSubtitleButton}">
									<Grid
										x:Name="addButtonGrid"
										Width="15"
										Height="15"
										Background="Transparent">
										<Rectangle
											x:Name="rect2"
											Width="10"
											Height="2"
											Fill="Green">
											<Rectangle.LayoutTransform>
												<RotateTransform Angle="0" />
											</Rectangle.LayoutTransform>
										</Rectangle>
										<Rectangle
											x:Name="rect1"
											Width="10"
											Height="2"
											Fill="Green">
											<Rectangle.LayoutTransform>
												<RotateTransform Angle="90" />
											</Rectangle.LayoutTransform>
										</Rectangle>
									</Grid>
								</Button>

								<!--  Subtitle picker button  -->
								<Button
									Margin="0"
									AutomationProperties.Name="{x:Static res:MainRes.SubtitlePickerButtonToolTip}"
									Command="{Binding OpenPickerToSubtitles}"
									Style="{StaticResource SummaryActionButton}"
									ToolTip="{x:Static res:MainRes.SubtitlePickerButtonToolTip}">
									<Image
										Width="20"
										Height="20"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Source="/Icons/Picker.png" />
								</Button>
							</StackPanel>
						</Grid>
					</ToggleButton>

					<!--  Subtitles detail  -->
					<Grid Grid.Row="5" Visibility="{Binding SubtitlesExpanded, Converter={StaticResource VisibilityConverter}}">
						<Grid.Resources>
							<Style x:Key="SubtitleControl" TargetType="{x:Type FrameworkElement}">
								<Setter Property="Margin" Value="4 0 4 2" />
								<Setter Property="HorizontalAlignment" Value="Center" />
							</Style>

							<DataTemplate x:Key="SourceDragTemplate">
								<TextBlock Background="White" Text="{Binding SubtitleName, Mode=OneWay}" />
							</DataTemplate>
							<DataTemplate x:Key="SelectedTemplate" DataType="viewmodel:SourceSubtitleViewModel">
								<CheckBox
									Width="22"
									Height="22"
									HorizontalAlignment="Stretch"
									VerticalAlignment="Stretch"
									HorizontalContentAlignment="Center"
									VerticalContentAlignment="Center"
									AutomationProperties.LiveSetting="Assertive"
									IsChecked="{Binding Selected}"
									Style="{StaticResource CheckBoxCenteredStyle}" />
							</DataTemplate>
							<DataTemplate x:Key="TrackSummaryTemplate" DataType="viewmodel:SourceSubtitleViewModel">
								<Grid Height="22">
									<TextBlock
										VerticalAlignment="Center"
										Style="{StaticResource SourceTrack}"
										Text="{Binding TrackSummary}" />
								</Grid>
							</DataTemplate>
							<DataTemplate x:Key="SourceNameTemplate" DataType="viewModel:SourceSubtitleViewModel">
								<Grid>
									<TextBlock
										Style="{StaticResource SourceTrack}"
										Text="{Binding SourceName}"
										Visibility="{Binding Selected,
										                     Converter={StaticResource InverseVisibilityConverter}}" />
									<TextBox
										Height="22"
										MinWidth="100"
										Margin="0"
										VerticalContentAlignment="Center"
										AutomationProperties.Name="{x:Static res:MainRes.SubtitleNameAutomationName}"
										Text="{Binding Name,
										               UpdateSourceTrigger=PropertyChanged}"
										Visibility="{Binding Selected,
										                     Converter={StaticResource VisibilityConverter}}" />
								</Grid>
							</DataTemplate>
							<DataTemplate x:Key="ForcedTemplate" DataType="viewmodel:SourceSubtitleViewModel">
								<CheckBox
									Width="75"
									Height="22"
									HorizontalContentAlignment="Center"
									VerticalContentAlignment="Center"
									IsChecked="{Binding ForcedOnly}"
									IsEnabled="{Binding ForcedOnlyEnabled}"
									Style="{StaticResource CheckBoxCenteredStyle}"
									ToolTip="{x:Static res:CommonRes.ForcedSubtitleToolTip}"
									Visibility="{Binding Selected,
									                     Converter={StaticResource VisibilityConverter}}" />
							</DataTemplate>
							<DataTemplate x:Key="BurnedInTemplate" DataType="viewmodel:SourceSubtitleViewModel">
								<CheckBox
									Width="70"
									Height="22"
									HorizontalContentAlignment="Center"
									VerticalContentAlignment="Center"
									IsChecked="{Binding BurnedIn}"
									IsEnabled="{Binding BurnedInEnabled}"
									Style="{StaticResource CheckBoxCenteredStyle}"
									ToolTip="{x:Static res:CommonRes.BurnedSubtitleToolTip}"
									ToolTipService.ShowOnDisabled="True"
									Visibility="{Binding Selected,
									                     Converter={StaticResource VisibilityConverter}}" />
							</DataTemplate>
							<DataTemplate x:Key="SubtitleFileDragTemplate">
								<TextBox Text="{Binding FileName, Mode=OneWay}" />
							</DataTemplate>
							<DataTemplate x:Key="FileNameTemplate" DataType="viewmodel:FileSubtitleViewModel">
								<controls:PathTextBlock
									Foreground="{DynamicResource WindowTextBrush}"
									Text="{Binding FileName}"
									ToolTipService.ToolTip="{Binding FileName}" />
							</DataTemplate>
							<DataTemplate x:Key="ImportNameTemplate" DataType="viewmodel:FileSubtitleViewModel">
								<TextBox
									Height="22"
									MinWidth="100"
									Margin="0"
									VerticalContentAlignment="Center"
									AutomationProperties.Name="{x:Static res:MainRes.SubtitleNameAutomationName}"
									Text="{Binding Name,
									               UpdateSourceTrigger=PropertyChanged}" />
							</DataTemplate>
							<DataTemplate x:Key="DefaultTemplate" DataType="viewmodel:SourceSubtitleViewModel">
								<CheckBox
									Width="55"
									Height="22"
									HorizontalContentAlignment="Center"
									VerticalContentAlignment="Center"
									IsChecked="{Binding Default}"
									IsEnabled="{Binding DefaultEnabled}"
									Style="{StaticResource CheckBoxCenteredStyle}"
									ToolTip="{x:Static res:CommonRes.DefaultSubtitleToolTip}"
									ToolTipService.ShowOnDisabled="True"
									Visibility="{Binding Selected,
									                     Converter={StaticResource VisibilityConverter}}" />
							</DataTemplate>
							<DataTemplate x:Key="LanguageTemplate" DataType="viewmodel:FileSubtitleViewModel">
								<ComboBox
									MinWidth="80"
									DisplayMemberPath="Display"
									ItemsSource="{x:Static interop:HandBrakeLanguagesHelper.AllLanguages}"
									SelectedValue="{Binding LanguageCode}"
									SelectedValuePath="Code" />
							</DataTemplate>
							<DataTemplate x:Key="CharCodeTemplate" DataType="viewmodel:FileSubtitleViewModel">
								<ComboBox
									Margin="4 0 4 2"
									ItemsSource="{Binding CharCodes}"
									SelectedItem="{Binding CharacterCode}" />
							</DataTemplate>
							<DataTemplate x:Key="OffsetTemplate" DataType="viewmodel:FileSubtitleViewModel">
								<controls:NumberBox
									Width="40"
									Height="22"
									AllowEmpty="False"
									Number="{Binding Offset,
									                 Mode=TwoWay}"
									ToolTip="{x:Static res:CommonRes.OffsetSubtitleToolTip}" />
							</DataTemplate>
							<DataTemplate x:Key="RemoveTemplate" DataType="viewmodel:SourceSubtitleViewModel">
								<Button
									Width="24"
									Height="24"
									VerticalAlignment="Center"
									Command="{Binding RemoveSubtitle}"
									Content="{x:Static res:CommonRes.RemoveTrack}"
									Style="{StaticResource RemoveButtonStyle}" />
							</DataTemplate>
							<DataTemplate x:Key="RemoveDuplicateTemplate" DataType="viewmodel:SourceSubtitleViewModel">
								<Grid>
									<Button
										VerticalAlignment="Center"
										Command="{Binding RemoveSubtitle}"
										Content="{x:Static res:CommonRes.RemoveTrack}"
										Style="{StaticResource RemoveButtonStyle}"
										Visibility="{Binding RemoveVisible,
										                     Converter={StaticResource VisibilityConverter}}" />
									<Button
										VerticalContentAlignment="Center"
										Command="{Binding DuplicateSubtitle}"
										Content="{x:Static res:CommonRes.DuplicateTrack}"
										Style="{StaticResource AddButtonStyle}"
										Visibility="{Binding DuplicateVisible,
										                     Converter={StaticResource VisibilityConverter}}" />
								</Grid>
							</DataTemplate>
						</Grid.Resources>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>

						<StackPanel
							Grid.Row="0"
							Margin="0 0 0 4"
							Orientation="Vertical">
							<TextBlock
								Margin="16 0 0 0"
								HorizontalAlignment="Left"
								VerticalAlignment="Top"
								Text="{x:Static res:SubtitleRes.NoSubtitlesText}"
								Visibility="{Binding HasSourceSubtitles,
								                     Converter={StaticResource InverseVisibilityConverter}}" />
							<TextBlock
								Margin="27 0 0 2"
								HorizontalAlignment="Left"
								VerticalAlignment="Top"
								Text="{x:Static res:SubtitleRes.SubtitlesFromSourceLabel}"
								Visibility="{Binding ShowSourceSubtitlesLabel,
								                     Converter={StaticResource VisibilityConverter}}" />

							<ListView
								Margin="-1 0"
								VerticalAlignment="Top"
								VidCoderDragDrop:DragDropHelper.DragDropTemplate="{StaticResource SourceDragTemplate}"
								VidCoderDragDrop:DragDropHelper.IsDragSource="True"
								VidCoderDragDrop:DragDropHelper.IsDropTarget="True"
								VidCoderDragDrop:DragDropHelper.SourceList="{Binding SourceSubtitles}"
								ItemsSource="{Binding SourceSubtitlesBindable}"
								UseLayoutRounding="True"
								Visibility="{Binding HasSourceSubtitles,
								                     Converter={StaticResource VisibilityConverter}}">
								<i:Interaction.Behaviors>
									<behaviors:IgnoreMouseWheelBehavior />
								</i:Interaction.Behaviors>
								<ListView.ItemContainerStyle>
									<Style BasedOn="{StaticResource ListViewItemNoSelectionStyle}" TargetType="ListViewItem">
										<EventSetter Event="PreviewMouseLeftButtonDown" Handler="SourceSubtitleMouseDown" />
										<EventSetter Event="MouseLeftButtonUp" Handler="SourceSubtitleMouseUp" />
										<EventSetter Event="KeyDown" Handler="OnSourceSubtitleKeyDown" />
									</Style>
								</ListView.ItemContainerStyle>
								<ListView.View>
									<GridView>
										<GridView.Columns>
											<GridViewColumn x:Name="sourceSelectedColumn" CellTemplate="{StaticResource SelectedTemplate}" />
											<GridViewColumn
												x:Name="sourceTrackSummaryColumn"
												CellTemplate="{StaticResource TrackSummaryTemplate}"
												Header="{x:Static res:MainRes.AudioSubtitleTrackColumnHeader}" />
											<GridViewColumn x:Name="sourceNameColumn" CellTemplate="{StaticResource SourceNameTemplate}">
												<GridViewColumn.Header>
													<TextBlock
														MinWidth="108"
														Text="{x:Static res:SubtitleRes.NameColumn}"
														TextAlignment="Center" />
												</GridViewColumn.Header>
											</GridViewColumn>
											<GridViewColumn x:Name="sourceDefaultColumn" CellTemplate="{StaticResource DefaultTemplate}">
												<GridViewColumn.Header>
													<TextBlock
														MinWidth="70"
														Text="{x:Static res:SubtitleRes.DefaultColumn}"
														TextAlignment="Center"
														ToolTip="{x:Static res:CommonRes.DefaultSubtitleToolTip}" />
												</GridViewColumn.Header>
											</GridViewColumn>
											<GridViewColumn x:Name="sourceForcedColumn" CellTemplate="{StaticResource ForcedTemplate}">
												<GridViewColumn.Header>
													<TextBlock
														MinWidth="85"
														Text="{x:Static res:SubtitleRes.ForcedOnlyColumn}"
														TextAlignment="Center"
														ToolTip="{x:Static res:CommonRes.ForcedSubtitleToolTip}" />
												</GridViewColumn.Header>
											</GridViewColumn>
											<GridViewColumn x:Name="sourceBurnedColumn" CellTemplate="{StaticResource BurnedInTemplate}">
												<GridViewColumn.Header>
													<TextBlock
														MinWidth="80"
														Text="{x:Static res:SubtitleRes.BurnedInColumn}"
														TextAlignment="Center"
														ToolTip="{x:Static res:CommonRes.BurnedSubtitleToolTip}"
														ToolTipService.ShowOnDisabled="True" />
												</GridViewColumn.Header>
											</GridViewColumn>
											<GridViewColumn x:Name="sourceRemoveDuplicateColumn" CellTemplate="{StaticResource RemoveDuplicateTemplate}" />
										</GridView.Columns>
									</GridView>
								</ListView.View>
							</ListView>
							<controls:InlineWarning
								Margin="16 6 16 0"
								Visibility="{Binding TextSubtitleWarningVisible,
								                     Converter={StaticResource VisibilityConverter}}"
								WarningText="{x:Static res:SubtitleRes.QuickTimeSubtitlesWarning}" />
						</StackPanel>



						<StackPanel
							Grid.Row="1"
							Margin="0 4 0 0"
							Orientation="Vertical"
							Visibility="{Binding HasFileSubtitles,
							                     Converter={StaticResource VisibilityConverter}}">
							<TextBlock
								Margin="27 0 0 2"
								HorizontalAlignment="Left"
								VerticalAlignment="Top"
								Text="{x:Static res:SubtitleRes.ExternalSubtitlesLabel}"
								Visibility="{Binding HasFileSubtitles,
								                     Converter={StaticResource VisibilityConverter}}" />

							<ListView
								Name="fileSubtitleListView"
								Margin="-1 0 -1 5"
								VerticalAlignment="Top"
								VidCoderDragDrop:DragDropHelper.DragDropTemplate="{StaticResource SubtitleFileDragTemplate}"
								VidCoderDragDrop:DragDropHelper.IsDragSource="True"
								VidCoderDragDrop:DragDropHelper.IsDropTarget="True"
								ItemContainerStyle="{StaticResource ListViewItemNoSelectionNoHoverStyle}"
								ItemsSource="{Binding FileSubtitlesBindable}">
								<i:Interaction.Behaviors>
									<behaviors:IgnoreMouseWheelBehavior />
								</i:Interaction.Behaviors>
								<ListView.View>
									<GridView>
										<GridView.Columns>
											<GridViewColumn
												x:Name="fileSubtitleFileColumn"
												CellTemplate="{StaticResource FileNameTemplate}"
												Header="{x:Static res:SubtitleRes.FileColumn}" />
											<GridViewColumn
												x:Name="fileSubtitleNameColumn"
												CellTemplate="{StaticResource ImportNameTemplate}"
												Header="{x:Static res:SubtitleRes.NameColumn}" />
											<GridViewColumn
												x:Name="fileSubtitleDefaultColumn"
												CellTemplate="{StaticResource DefaultTemplate}"
												Header="{x:Static res:SubtitleRes.DefaultColumn}" />
											<GridViewColumn
												x:Name="fileSubtitleBurnedInColumn"
												CellTemplate="{StaticResource BurnedInTemplate}"
												Header="{x:Static res:SubtitleRes.BurnedInColumn}" />
											<GridViewColumn
												x:Name="fileSubtitleLanguageColumn"
												CellTemplate="{StaticResource LanguageTemplate}"
												Header="{x:Static res:SubtitleRes.LanguageColumn}" />
											<GridViewColumn
												x:Name="fileSubtitleCharCodeColumn"
												CellTemplate="{StaticResource CharCodeTemplate}"
												Header="{x:Static res:SubtitleRes.CharCodeColumn}" />
											<GridViewColumn CellTemplate="{StaticResource OffsetTemplate}" Header="{x:Static res:SubtitleRes.OffsetColumn}" />
											<GridViewColumn Width="36" CellTemplate="{StaticResource RemoveTemplate}" />
										</GridView.Columns>
									</GridView>
								</ListView.View>
							</ListView>

							<controls:InlineWarning
								Margin="16 6 16 0"
								Visibility="{Binding BurnedOverlapWarningVisible,
								                     Converter={StaticResource VisibilityConverter}}"
								WarningText="{x:Static res:SubtitleRes.BurnedOverlapWarning}" />
						</StackPanel>

					</Grid>


					<!--  Chapters header  -->
					<Grid
						Grid.Row="6"
						Height="30"
						Visibility="{Binding ShowChapterMarkerUI,
						                     Converter={StaticResource VisibilityConverter}}" />
					<StackPanel
						Grid.Row="6"
						Margin="26 0 0 0"
						Orientation="Horizontal"
						Visibility="{Binding ShowChapterMarkerUI,
						                     Converter={StaticResource VisibilityConverter}}">
						<Image
							Width="16"
							Height="16"
							Source="/Icons/ChapterMarkers.png" />
						<TextBlock
							Margin="6 0 0 0"
							HorizontalAlignment="Left"
							Style="{StaticResource SourceSectionText}"
							Text="{x:Static res:MainRes.ChapterMarkersLabel}" />
						<TextBlock
							MinWidth="48"
							Margin="6 0 0 0"
							Style="{StaticResource SourceSectionText}"
							Text="{Binding ChapterMarkersSummary}" />
						<Button
							Height="23"
							MinWidth="53"
							Margin="16 0 0 0"
							Padding="5 0"
							HorizontalAlignment="Right"
							VerticalAlignment="Center"
							AutomationProperties.Name="{x:Static res:MainRes.EditChaptersButtonAutomationName}"
							Command="{Binding OpenChaptersDialog}"
							Content="{x:Static res:MainRes.EditButton}" />
					</StackPanel>
				</Grid>
			</ScrollViewer>

			<!--  Scan progress  -->
			<Grid
				Grid.Row="2"
				Margin="26 0 40 0"
				VerticalAlignment="Center"
				Visibility="{Binding VideoSourceState,
				                     Converter={StaticResource EnumVisibilityConverter},
				                     ConverterParameter={x:Static model:VideoSourceState.Scanning}}">
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition />
				</Grid.RowDefinitions>
				<Grid.ColumnDefinitions>
					<ColumnDefinition />
					<ColumnDefinition Width="Auto" />
				</Grid.ColumnDefinitions>
				<TextBlock
					Grid.Row="0"
					Grid.Column="0"
					Grid.ColumnSpan="2"
					HorizontalAlignment="Center"
					Style="{StaticResource ScanStatus}"
					Text="{Binding ScanningSourceLabel}"
					TextWrapping="Wrap" />
				<ProgressBar
					Grid.Row="1"
					Grid.Column="0"
					Height="22"
					Margin="6 0 0 0"
					VerticalAlignment="Center"
					Background="{DynamicResource WindowBrush}"
					Maximum="1"
					Minimum="0"
					Value="{Binding ScanProgressFraction}" />
				<Button
					Grid.Row="1"
					Grid.Column="1"
					Height="25"
					MinWidth="55"
					Margin="10 0 0 0"
					Padding="5 0"
					VerticalAlignment="Center"
					Command="{Binding CancelScan}"
					Content="{x:Static res:CommonRes.Cancel}" />
			</Grid>

			<GridSplitter
				Grid.Row="3"
				Grid.Column="0"
				Height="4"
				HorizontalAlignment="Stretch"
				VerticalAlignment="Center"
				Background="{DynamicResource SplitterBrush}"
				Canvas.ZIndex="4"
				ShowsPreview="True" />

			<!--  Below source - Destination / queue / Encode progress  -->
			<Grid Grid.Row="4">
				<Grid.RowDefinitions>
					<!--  Destination  -->
					<RowDefinition Height="Auto" />
					<!--  Queue  -->
					<RowDefinition Height="*" />
					<!--  Encode progress  -->
					<RowDefinition Height="Auto" />
				</Grid.RowDefinitions>

				<!--  Destination section  -->
				<Grid Grid.Row="0" Background="{DynamicResource AlternateBackgroundBrush}">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition />
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="Auto" />
					</Grid.ColumnDefinitions>
					<TextBlock
						Height="19"
						Margin="8 4 0 4"
						HorizontalAlignment="Left"
						VerticalAlignment="Center"
						Style="{StaticResource MainSectionHeader}"
						Text="{x:Static res:MainRes.DestinationLabel}" />
					<Grid
						Grid.Column="1"
						Height="30"
						Margin="6 0 0 0"
						VerticalAlignment="Center">
						<TextBox
							Name="destinationEditBox"
							Padding="4 0 4 0"
							VerticalContentAlignment="Center"
							GotFocus="DestinationEditBoxGotFocus"
							LostFocus="DestinationEditBoxLostFocus"
							PreviewKeyDown="DestinationEditBoxPreviewKeyDown"
							Text="{Binding OutputPathService.OutputPath,
							               UpdateSourceTrigger=PropertyChanged}" />
						<Grid
							Name="destinationReadCover"
							Margin="0"
							Background="Transparent"
							Cursor="Hand"
							MouseLeftButtonDown="DestinationReadCoverMouseLeftButtonDown"
							ToolTip="{x:Static res:MainRes.DestinationToolTip}"
							Visibility="{Binding OutputPathService.EditingDestination,
							                     Converter={StaticResource InverseVisibilityConverter}}">
							<Image
								Height="20"
								Margin="0 0 4 0"
								HorizontalAlignment="Right"
								Source="/Icons/edit_2.png"
								Visibility="{Binding IsMouseOver,
								                     ElementName=destinationReadCover,
								                     Converter={StaticResource VisibilityConverter}}" />
						</Grid>
					</Grid>

					<Button
						Name="outputPathBrowseButton"
						Grid.Column="2"
						Height="30"
						Margin="0"
						Padding="8 0"
						VerticalAlignment="Center"
						Command="{Binding OutputPathService.PickOutputPath}"
						Content="{x:Static res:CommonRes.Browse}"
						Style="{StaticResource BorderlessButtonStyle}" />

					<Button
						Grid.Column="3"
						Height="30"
						MinWidth="75"
						Margin="0"
						Padding="8 0"
						VerticalAlignment="Center"
						Command="{Binding OutputPathService.ChangeToAutomatic}"
						Content="{x:Static res:CommonRes.Manual}"
						Style="{StaticResource BorderlessButtonStyle}"
						ToolTip="{x:Static res:MainRes.DestinationManualToolTip}"
						Visibility="{Binding OutputPathService.ManualOutputPath,
						                     Converter={StaticResource VisibilityConverter}}" />
					<Button
						Grid.Column="3"
						Height="30"
						MinWidth="75"
						Margin="0"
						Padding="8 0"
						VerticalAlignment="Center"
						Command="{Binding OutputPathService.OpenPickerToDestination}"
						Content="{x:Static res:CommonRes.Automatic}"
						Style="{StaticResource BorderlessButtonStyle}"
						ToolTip="{x:Static res:MainRes.DestinationAutomaticToolTip}"
						Visibility="{Binding OutputPathService.ManualOutputPath,
						                     Converter={StaticResource InverseVisibilityConverter}}" />
				</Grid>

				<!--  Queue section  -->
				<Grid Grid.Row="1" Canvas.ZIndex="2">
					<Grid Name="tabsArea" Margin="0">
						<TabControl
							Name="queueItemsTabControl"
							Padding="0"
							BorderThickness="0"
							SelectedIndex="{Binding ProcessingService.SelectedTabIndex}">
							<TabItem Name="queueTab" Visibility="Collapsed">
								<TabItem.Header>
									<TextBlock Text="{Binding ProcessingService.QueuedTabHeader}" />
								</TabItem.Header>
								<controls:EnhancedListView
									x:Name="queueView"
									VidCoderDragDrop:DragDropHelper.BlockedTopSpaces="{Binding ProcessingService.JobsEncodingCount}"
									VidCoderDragDrop:DragDropHelper.DragDropTemplate="{StaticResource QueueDragTemplate}"
									VidCoderDragDrop:DragDropHelper.IsDragSource="True"
									VidCoderDragDrop:DragDropHelper.IsDropTarget="True"
									VidCoderDragDrop:DragDropHelper.SourceList="{Binding ProcessingService.EncodeQueue}"
									BorderBrush="#F5F5F5"
									BorderThickness="0"
									ItemsSource="{Binding ProcessingService.EncodeQueueBindable}">
									<controls:EnhancedListView.ItemContainerStyle>
										<Style BasedOn="{StaticResource ListViewItemBaseStyle}" TargetType="ListViewItem">
											<Setter Property="IsSelected" Value="{Binding Mode=TwoWay, Path=IsSelected}" />
											<Setter Property="HorizontalContentAlignment" Value="Stretch" />
											<Setter Property="ContextMenu">
												<Setter.Value>
													<ContextMenu>
														<MenuItem Command="{Binding ProcessingService.MoveSelectedJobsToTop}" Header="{x:Static res:MainRes.MoveToTopMenuItem}" />
														<MenuItem Command="{Binding ProcessingService.MoveSelectedJobsToBottom}" Header="{x:Static res:MainRes.MoveToBottomMenuItem}" />
														<Separator />
														<MenuItem
															Command="{Binding Stop}"
															Header="{x:Static res:MainRes.Stop}"
															Visibility="{Binding Encoding,
															                     Converter={StaticResource VisibilityConverter}}">
															<MenuItem.Icon>
																<Image
																	Width="16"
																	Height="16"
																	Source="/Icons/Stop.png" />
															</MenuItem.Icon>
														</MenuItem>
														<MenuItem Command="{Binding EditQueueJob}" Header="{x:Static res:MainRes.Edit}">
															<MenuItem.Icon>
																<Image
																	Width="16"
																	Height="16"
																	Source="/Icons/edit_16x16.png" />
															</MenuItem.Icon>
														</MenuItem>
														<MenuItem Command="{Binding ProcessingService.ApplyCurrentPresetToSelectedJobs}" Header="{x:Static res:MainRes.ApplyCurrentEncodingSettings}" />
														<MenuItem Command="{Binding ProcessingService.RemoveSelectedJobs}" Header="{x:Static res:MainRes.RemoveFromQueueMenuItem}">
															<MenuItem.Icon>
																<Image
																	Width="16"
																	Height="16"
																	Source="/Icons/Remove.png" />
															</MenuItem.Icon>
														</MenuItem>
														<MenuItem
															Command="{Binding ProcessingService.RemoveAllJobs}"
															Header="{x:Static res:MainRes.RemoveAllFomQueueMenuItem}"
															Visibility="{Binding ProcessingService.CanClearQueue,
															                     Converter={StaticResource VisibilityConverter}}">
															<MenuItem.Icon>
																<Image
																	Width="16"
																	Height="16"
																	Source="/Icons/Clear.png" />
															</MenuItem.Icon>
														</MenuItem>
														<Separator />
														<MenuItem Command="{Binding OpenSourceFolder}" Header="{x:Static res:MainRes.OpenSourceFolderOption}">
															<MenuItem.Icon>
																<Image
																	Width="16"
																	Height="16"
																	Source="/Icons/win7foldericon.png" />
															</MenuItem.Icon>
														</MenuItem>
														<Separator />
														<MenuItem Command="{Binding ProcessingService.ImportQueue}" Header="{x:Static res:MainRes.ImportQueue}" />
														<MenuItem
															Command="{Binding ProcessingService.ExportQueue}"
															Header="{x:Static res:MainRes.ExportQueue}"
															IsEnabled="{Binding ProcessingService.QueueHasItems}" />
													</ContextMenu>
												</Setter.Value>
											</Setter>
										</Style>
									</controls:EnhancedListView.ItemContainerStyle>
									<controls:EnhancedListView.View>
										<GridView x:Name="queueGridView" AllowsColumnReorder="False">
											<GridView.Columns>
												<GridViewColumn Width="75" CellTemplate="{StaticResource QueueRemoveTemplate}" />
											</GridView.Columns>
										</GridView>
									</controls:EnhancedListView.View>
									<controls:EnhancedListView.ContextMenu>
										<ContextMenu>
											<MenuItem Command="{Binding CustomizeQueueColumns}" Header="{x:Static res:MainRes.CustomizeColumnsMenuItem}" />
											<Separator />
											<MenuItem
												Command="{Binding ProcessingService.RemoveAllJobs}"
												Header="{x:Static res:MainRes.RemoveAllFomQueueMenuItem}"
												Visibility="{Binding ProcessingService.CanClearQueue,
												                     Converter={StaticResource VisibilityConverter}}">
												<MenuItem.Icon>
													<Image
														Width="16"
														Height="16"
														Source="/Icons/Clear.png" />
												</MenuItem.Icon>
											</MenuItem>
											<Separator Visibility="{Binding ProcessingService.CanClearQueue, Converter={StaticResource VisibilityConverter}}" />
											<MenuItem Command="{Binding ProcessingService.ImportQueue}" Header="{x:Static res:MainRes.ImportQueue}" />
											<MenuItem
												Command="{Binding ProcessingService.ExportQueue}"
												Header="{x:Static res:MainRes.ExportQueue}"
												IsEnabled="{Binding ProcessingService.QueueHasItems}" />
										</ContextMenu>
									</controls:EnhancedListView.ContextMenu>
								</controls:EnhancedListView>
							</TabItem>
							<TabItem Name="completedTab" Visibility="Collapsed">
								<TabItem.Header>
									<TextBlock Text="{Binding ProcessingService.CompletedTabHeader}">
										<TextBlock.ContextMenu>
											<ContextMenu>
												<MenuItem
													Command="{Binding ProcessingService.RetryFailed}"
													Header="{x:Static res:MainRes.RetryFailedItemsMenuItem}"
													Visibility="{Binding ProcessingService.HasFailedItems,
													                     Converter={StaticResource VisibilityConverter}}">
													<MenuItem.Icon>
														<Image
															Width="16"
															Height="16"
															Source="/Icons/Reload.png" />
													</MenuItem.Icon>
												</MenuItem>
												<MenuItem Command="{Binding ProcessingService.ClearCompleted}" Header="{x:Static res:MainRes.ClearCompleted}">
													<MenuItem.Icon>
														<Image
															Width="16"
															Height="16"
															Source="/Icons/Clear.png" />
													</MenuItem.Icon>
												</MenuItem>
												<MenuItem Command="{Binding ProcessingService.ClearSucceeded}" Header="{x:Static res:MainRes.ClearSucceededMenuItem}">
													<MenuItem.Icon>
														<Image
															Width="16"
															Height="16"
															Source="/Icons/ClearSucceeded.png" />
													</MenuItem.Icon>
												</MenuItem>
												<MenuItem
													Command="{Binding ProcessingService.ClearFailed}"
													Header="{x:Static res:MainRes.ClearFailedMenuItem}"
													Visibility="{Binding ProcessingService.HasFailedItems,
													                     Converter={StaticResource VisibilityConverter}}">
													<MenuItem.Icon>
														<Image
															Width="16"
															Height="16"
															Source="/Icons/ClearFailed.png" />
													</MenuItem.Icon>
												</MenuItem>
											</ContextMenu>
										</TextBlock.ContextMenu>
									</TextBlock>
								</TabItem.Header>
								<ListView
									BorderBrush="#F5F5F5"
									BorderThickness="0"
									ItemContainerStyle="{StaticResource CompletedItemStyle}"
									ItemsSource="{Binding ProcessingService.CompletedJobsBindable}">
									<ListView.View>
										<GridView x:Name="completedGridView">
											<GridView.Columns>
												<GridViewColumn Width="300" Header="{x:Static res:MainRes.DestinationColumnHeader}">
													<GridViewColumn.CellTemplate>
														<DataTemplate>
															<controls:PathTextBlock Style="{StaticResource ListViewPathText}" Text="{Binding EncodeResult.Destination}" />
														</DataTemplate>
													</GridViewColumn.CellTemplate>
												</GridViewColumn>
												<GridViewColumn Width="120" Header="{x:Static res:MainRes.StatusColumnHeader}">
													<GridViewColumn.CellTemplate>
														<DataTemplate>
															<StackPanel Orientation="Horizontal">
																<Image
																	Width="16"
																	Height="16"
																	Source="{Binding StatusImage}" />
																<TextBlock
																	Margin="4 0 0 0"
																	Style="{DynamicResource ListViewTextBlockBaseStyle}"
																	Text="{Binding StatusText}" />
															</StackPanel>
														</DataTemplate>
													</GridViewColumn.CellTemplate>
												</GridViewColumn>
												<GridViewColumn Width="90" Header="{x:Static res:MainRes.ElapsedTimeColumnHeader}">
													<GridViewColumn.CellTemplate>
														<DataTemplate>
															<TextBlock Style="{DynamicResource ListViewTextBlockBaseStyle}" Text="{Binding TimeDisplay}" />
														</DataTemplate>
													</GridViewColumn.CellTemplate>
												</GridViewColumn>
												<GridViewColumn Width="80" Header="{x:Static res:MainRes.FileSizeColumnHeader}">
													<GridViewColumn.CellTemplate>
														<DataTemplate>
															<TextBlock Style="{DynamicResource ListViewTextBlockBaseStyle}" Text="{Binding OutputFileSize}" />
														</DataTemplate>
													</GridViewColumn.CellTemplate>
												</GridViewColumn>
											</GridView.Columns>
										</GridView>
									</ListView.View>
									<ListView.ContextMenu>
										<ContextMenu>
											<MenuItem
												Command="{Binding ProcessingService.RetryFailed}"
												Header="{x:Static res:MainRes.RetryFailedItemsMenuItem}"
												Visibility="{Binding ProcessingService.HasFailedItems,
												                     Converter={StaticResource VisibilityConverter}}">
												<MenuItem.Icon>
													<Image
														Width="16"
														Height="16"
														Source="/Icons/Reload.png" />
												</MenuItem.Icon>
											</MenuItem>
											<MenuItem Command="{Binding ProcessingService.ClearCompleted}" Header="{x:Static res:MainRes.ClearCompleted}">
												<MenuItem.Icon>
													<Image
														Width="16"
														Height="16"
														Source="/Icons/Clear.png" />
												</MenuItem.Icon>
											</MenuItem>
											<MenuItem Command="{Binding ProcessingService.ClearSucceeded}" Header="{x:Static res:MainRes.ClearSucceededMenuItem}">
												<MenuItem.Icon>
													<Image
														Width="16"
														Height="16"
														Source="/Icons/ClearSucceeded.png" />
												</MenuItem.Icon>
											</MenuItem>
											<MenuItem
												Command="{Binding ProcessingService.ClearFailed}"
												Header="{x:Static res:MainRes.ClearFailedMenuItem}"
												Visibility="{Binding ProcessingService.HasFailedItems,
												                     Converter={StaticResource VisibilityConverter}}">
												<MenuItem.Icon>
													<Image
														Width="16"
														Height="16"
														Source="/Icons/ClearFailed.png" />
												</MenuItem.Icon>
											</MenuItem>
										</ContextMenu>
									</ListView.ContextMenu>
								</ListView>
							</TabItem>
						</TabControl>

						<Button
							Name="clearCompletedQueueItemsButton"
							Width="20"
							Height="20"
							HorizontalAlignment="Right"
							VerticalAlignment="Top"
							Command="{Binding ProcessingService.ClearCompleted}"
							Style="{StaticResource RemoveButtonStyle}"
							Visibility="Collapsed">
							Clear completed queue items
						</Button>

						<Border
							Name="statusText"
							HorizontalAlignment="Right"
							VerticalAlignment="Bottom"
							Background="{DynamicResource WindowBrush}"
							BorderBrush="DarkGray"
							BorderThickness="1 1 0 0"
							CornerRadius="4,0,0,0"
							Visibility="Collapsed">
							<TextBlock
								Name="statusTextBlock"
								Margin="3 1 5 3"
								FontSize="14"
								TextWrapping="Wrap" />
						</Border>
					</Grid>
				</Grid>

				<!--  Encode progress section  -->
				<Grid
					Grid.Row="2"
					Height="28"
					Background="{DynamicResource AlternateBackgroundBrush}"
					Visibility="{Binding ProcessingService.Encoding,
					                     Converter={StaticResource VisibilityConverter}}">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="Auto" />
					</Grid.ColumnDefinitions>

					<!--  Progress bar  -->
					<Grid
						Grid.Column="0"
						Height="24"
						Margin="3 0 0 0"
						VerticalAlignment="Center"
						MouseEnter="ProgressMouseEnter"
						MouseLeave="ProgressMouseLeave"
						Visibility="{Binding ProcessingService.Encoding,
						                     Converter={StaticResource VisibilityConverter}}">
						<ProgressBar
							Name="overallEncodeProgressBar"
							Height="24"
							VerticalAlignment="Top"
							Background="{DynamicResource WindowBrush}"
							Foreground="{Binding ProcessingService.ProgressBarBrush}"
							Value="{Binding ProcessingService.OverallEncodeProgressPercent,
							                Mode=OneWay}" />
						<TextBlock
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							Text="{Binding ProcessingService.OverallEncodeProgressPercent,
							               Mode=OneWay,
							               Converter={StaticResource PercentDisplayConverter}}" />
						<Popup
							Name="encodeProgressDetailsPopup"
							AllowsTransparency="True"
							IsOpen="False"
							Placement="Center"
							PlacementTarget="{Binding ElementName=overallEncodeProgressBar}"
							VerticalOffset="-36">
							<ContentControl Template="{StaticResource PopupInfoTemplate}">
								<Grid Margin="7 2 7 2">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="40" />
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>
									<TextBlock
										Grid.Row="0"
										Grid.Column="0"
										Style="{StaticResource EncodeDetailsHeader}"
										Text="{x:Static res:MainRes.CurrentFpsLabel}" />
									<TextBlock
										Grid.Row="0"
										Grid.Column="1"
										Style="{StaticResource EncodeDetailsText}"
										Text="{Binding ProcessingService.CurrentFps,
										               Mode=OneWay,
										               Converter={StaticResource DoubleDisplayConverter}}"
										TextAlignment="Center" />
									<TextBlock
										Grid.Row="1"
										Grid.Column="0"
										Style="{StaticResource EncodeDetailsHeader}"
										Text="{x:Static res:MainRes.AverageFpsLabel}" />
									<TextBlock
										Grid.Row="1"
										Grid.Column="1"
										Style="{StaticResource EncodeDetailsText}"
										Text="{Binding ProcessingService.AverageFps,
										               Mode=OneWay,
										               Converter={StaticResource DoubleDisplayConverter}}"
										TextAlignment="Center" />
								</Grid>
							</ContentControl>
						</Popup>
					</Grid>

					<StackPanel
						Grid.Column="1"
						HorizontalAlignment="Right"
						Orientation="Horizontal">
						<TextBlock
							Margin="6 0 0 0"
							HorizontalAlignment="Right"
							VerticalAlignment="Center"
							Text="{x:Static res:MainRes.EtaLabel}"
							ToolTip="{x:Static res:CommonRes.QueueEtaToolTip}"
							Visibility="{Binding ProcessingService.EncodeSpeedDetailsAvailable,
							                     Converter={StaticResource VisibilityConverter}}" />
						<TextBlock
							Margin="3 0 0 0"
							HorizontalAlignment="Right"
							VerticalAlignment="Center"
							Text="{Binding ProcessingService.WorkTracker.EstimatedTimeRemaining}"
							ToolTip="{x:Static res:CommonRes.QueueEtaToolTip}"
							Visibility="{Binding ProcessingService.EncodeSpeedDetailsAvailable,
							                     Converter={StaticResource VisibilityConverter}}" />
						<TextBlock
							Name="whenDoneLabel"
							Margin="8 0 3 0"
							HorizontalAlignment="Right"
							VerticalAlignment="Center"
							Text="{x:Static res:MainRes.WhenDoneLabel}" />

						<ComboBox
							Margin="0 0 3 0"
							HorizontalAlignment="Right"
							VerticalAlignment="Center"
							AutomationProperties.LabeledBy="{Binding ElementName=whenDoneLabel}"
							ItemsSource="{Binding ProcessingService.EncodeCompleteActions}"
							SelectedValue="{Binding ProcessingService.EncodeCompleteAction}" />
					</StackPanel>
				</Grid>
			</Grid>
		</Grid>
	</Border>
</Window>

