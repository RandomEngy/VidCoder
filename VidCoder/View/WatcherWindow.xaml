<Window
	x:Class="VidCoder.View.WatcherWindow"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:commonModel="clr-namespace:VidCoderCommon.Model;assembly=VidCoderCommon"
	xmlns:controls="clr-namespace:VidCoder.Controls"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:local="clr-namespace:VidCoder"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:model="clr-namespace:VidCoder.Model"
	xmlns:res="clr-namespace:VidCoder.Resources"
	xmlns:viewModel="clr-namespace:VidCoder.ViewModel"
	Title="{x:Static res:WatcherRes.WatcherWindowTitle}"
	Width="600"
	Height="300"
	d:DataContext="{d:DesignInstance viewModel:WatcherWindowViewModel}"
	ShowInTaskbar="False"
	Style="{StaticResource NormalWindow}"
	WindowStyle="None"
	mc:Ignorable="d">
	<WindowChrome.WindowChrome>
		<WindowChrome CaptionHeight="30" ResizeBorderThickness="{x:Static SystemParameters.WindowResizeBorderThickness}" />
	</WindowChrome.WindowChrome>
	<Window.Resources>
		<local:EnumDisplayer x:Key="StatusConverter" Type="{x:Type model:WatchedFileStatusLive}" />
		<Style
			x:Key="ToolbarCheckBox"
			BasedOn="{StaticResource CheckBoxBaseStyle}"
			TargetType="CheckBox">
			<Setter Property="MinHeight" Value="30" />
			<Setter Property="Margin" Value="12 0 0 0" />
			<Setter Property="VerticalContentAlignment" Value="Center" />
		</Style>
	</Window.Resources>
	<Border Style="{StaticResource WindowMainPanelStyle}">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition />
			</Grid.RowDefinitions>
			<controls:ToolWindowTitleBar
				Title="{Binding WindowTitle}"
				Grid.Row="0"
				Icon="/Icons/Eye.png"
				IsActive="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}}" />
			<Grid Grid.Row="2">
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition Height="Auto" />
					<RowDefinition Height="4" />
					<RowDefinition Height="Auto" />
					<RowDefinition />
				</Grid.RowDefinitions>
				<!--  Button toolbar  -->
				<WrapPanel
					Grid.Row="0"
					Margin="12 0 0 0"
					Orientation="Horizontal">
					<TextBlock
						VerticalAlignment="Center"
						FontWeight="Bold"
						Text="{x:Static res:WatcherRes.WatchedFoldersHeader}" />
					<CheckBox
						Content="{x:Static res:CommonRes.Enabled}"
						IsChecked="{Binding WatcherEnabled}"
						Style="{StaticResource ToolbarCheckBox}" />
					<CheckBox
						Content="{x:Static res:WatcherRes.RunWhenClosedCheckBox}"
						IsChecked="{Binding RunWhenClosed}"
						Style="{StaticResource ToolbarCheckBox}"
						Visibility="{Binding WatcherEnabled, Converter={StaticResource VisibilityConverter}}" />
					<Button
						MinHeight="30"
						Margin="6 0 0 0"
						Padding="6 0"
						AutomationProperties.Name="{x:Static res:WatcherRes.AddFolderToWatch}"
						Command="{Binding AddWatchedFolder}"
						Style="{StaticResource BorderlessButtonStyle}"
						Visibility="{Binding WatcherEnabled, Converter={StaticResource VisibilityConverter}}">
						<StackPanel Orientation="Horizontal">
							<Grid
								Width="15"
								Height="15"
								Background="Transparent">
								<Grid.ToolTip>
									<ContentPresenter />
								</Grid.ToolTip>
								<Rectangle
									x:Name="rect2"
									Width="14"
									Height="2"
									Fill="Green">
									<Rectangle.LayoutTransform>
										<RotateTransform Angle="0" />
									</Rectangle.LayoutTransform>
								</Rectangle>
								<Rectangle
									x:Name="rect1"
									Width="14"
									Height="2"
									Fill="Green">
									<Rectangle.LayoutTransform>
										<RotateTransform Angle="90" />
									</Rectangle.LayoutTransform>
								</Rectangle>
							</Grid>
							<TextBlock
								Margin="6 0 0 0"
								VerticalAlignment="Center"
								Text="{x:Static res:WatcherRes.AddFolderToWatch}" />
						</StackPanel>
					</Button>
				</WrapPanel>

				<!--  Watched folder list  -->
				<ItemsControl
					Grid.Row="1"
					ItemsSource="{Binding WatchedFoldersBindable}"
					Visibility="{Binding WatcherEnabled, Converter={StaticResource VisibilityConverter}}">
					<ItemsControl.ItemsPanel>
						<ItemsPanelTemplate>
							<StackPanel Orientation="Vertical" />
						</ItemsPanelTemplate>
					</ItemsControl.ItemsPanel>
					<ItemsControl.ItemTemplate>
						<DataTemplate>
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<Button
									HorizontalContentAlignment="Stretch"
									AutomationProperties.Name="{Binding WatchedFolder.Path}"
									Command="{Binding EditFolder}"
									Style="{StaticResource BorderlessButtonStyle}">
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition />
											<ColumnDefinition Width="Auto" />
										</Grid.ColumnDefinitions>
										<Image
											Grid.Column="0"
											Width="20"
											Height="20"
											Margin="12 0 0 0"
											Source="/Icons/folder.png" />


										<controls:PathTextBlock
											Grid.Column="1"
											Margin="6 0 0 0"
											VerticalAlignment="Center"
											Text="{Binding WatchedFolder.Path}" />

										<StackPanel Grid.Column="2" Orientation="Horizontal">
											<Image
												Width="16"
												Height="16"
												Margin="10 0 0 0"
												Source="/Icons/EncodingSettings.png" />
											<TextBlock
												Margin="3 0 0 0"
												VerticalAlignment="Center"
												Foreground="{DynamicResource DescriptiveTextBrush}"
												Text="{Binding WatchedFolder.Preset}" />

											<Image
												Width="16"
												Height="16"
												Margin="10 0 0 0"
												Source="/Icons/Picker.png" />
											<TextBlock
												Margin="3 0 0 0"
												VerticalAlignment="Center"
												Foreground="{DynamicResource DescriptiveTextBrush}"
												Text="{Binding PickerName}" />
											<Image
												Grid.Column="2"
												Width="16"
												Height="16"
												Margin="8 0"
												Source="/Icons/edit_16x16.png" />
										</StackPanel>
									</Grid>
								</Button>

								<Button
									Grid.Column="1"
									Padding="10"
									VerticalAlignment="Stretch"
									Command="{Binding RemoveFolder}"
									Content="{x:Static res:WatcherRes.RemoveWatchedFolder}"
									Style="{StaticResource RemoveButtonStyle}" />
							</Grid>
						</DataTemplate>
					</ItemsControl.ItemTemplate>
				</ItemsControl>

				<Rectangle
					Grid.Row="2"
					Fill="{DynamicResource SplitterBrush}"
					Visibility="{Binding ShowFiles, Converter={StaticResource VisibilityConverter}}" />

				<!--  File grid header  -->
				<WrapPanel
					Grid.Row="3"
					Margin="12 0 0 0"
					Orientation="Horizontal"
					Visibility="{Binding ShowFiles, Converter={StaticResource VisibilityConverter}}">
					<TextBlock
						VerticalAlignment="Center"
						FontWeight="Bold"
						Text="{x:Static res:WatcherRes.WatchedFilesHeader}" />
					<CheckBox
						Content="{x:Static res:EnumsRes.WatchedFileStatusLive_Queued}"
						IsChecked="{Binding ShowQueued}"
						Style="{StaticResource ToolbarCheckBox}"
						ToolTip="{x:Static res:WatcherRes.StatusQueuedToolTip}" />
					<CheckBox
						Content="{x:Static res:EnumsRes.WatchedFileStatusLive_Succeeded}"
						IsChecked="{Binding ShowSucceeded}"
						Style="{StaticResource ToolbarCheckBox}"
						ToolTip="{x:Static res:WatcherRes.StatusSucceededToolTip}" />
					<CheckBox
						Content="{x:Static res:EnumsRes.WatchedFileStatusLive_Failed}"
						IsChecked="{Binding ShowFailed}"
						Style="{StaticResource ToolbarCheckBox}"
						ToolTip="{x:Static res:WatcherRes.StatusFailedToolTip}" />
					<CheckBox
						Content="{x:Static res:EnumsRes.WatchedFileStatusLive_Canceled}"
						IsChecked="{Binding ShowCanceled}"
						Style="{StaticResource ToolbarCheckBox}"
						ToolTip="{x:Static res:WatcherRes.StatusCanceledToolTip}" />
					<CheckBox
						Content="{x:Static res:EnumsRes.WatchedFileStatusLive_Skipped}"
						IsChecked="{Binding ShowSkipped}"
						Style="{StaticResource ToolbarCheckBox}"
						ToolTip="{x:Static res:WatcherRes.StatusSkippedToolTip}" />
					<CheckBox
						Content="{x:Static res:EnumsRes.WatchedFileStatusLive_Output}"
						IsChecked="{Binding ShowOutput}"
						Style="{StaticResource ToolbarCheckBox}"
						ToolTip="{x:Static res:WatcherRes.StatusOutputToolTip}" />
				</WrapPanel>

				<!--  Watched file grid  -->
				<controls:EnhancedListView
					Grid.Row="4"
					ItemsSource="{Binding WatchedFilesBindable}"
					Visibility="{Binding ShowFiles, Converter={StaticResource VisibilityConverter}}">
					<controls:EnhancedListView.ItemContainerStyle>
						<Style BasedOn="{StaticResource ListViewItemBaseStyle}" TargetType="ListViewItem">
							<Setter Property="IsSelected" Value="{Binding Mode=TwoWay, Path=IsSelected}" />
							<Setter Property="HorizontalContentAlignment" Value="Stretch" />
							<Setter Property="ContextMenu">
								<Setter.Value>
									<ContextMenu>
										<MenuItem
											Command="{Binding Cancel}"
											Header="{x:Static res:WatcherRes.CancelMenuItem}"
											Visibility="{Binding CanCancel, Converter={StaticResource VisibilityConverter}}">
											<MenuItem.Icon>
												<Image
													Width="16"
													Height="16"
													Source="/Icons/Remove.png" />
											</MenuItem.Icon>
										</MenuItem>
										<MenuItem
											Command="{Binding Retry}"
											Header="{x:Static res:WatcherRes.RetryMenuItem}"
											Visibility="{Binding CanRetry, Converter={StaticResource VisibilityConverter}}">
											<MenuItem.Icon>
												<Image
													Width="16"
													Height="16"
													Source="/Icons/Reload.png" />
											</MenuItem.Icon>
										</MenuItem>
										<Separator />
										<MenuItem Command="{Binding OpenContainingFolder}" Header="{x:Static res:WatcherRes.OpenContainingFolderMenuItem}">
											<MenuItem.Icon>
												<Image
													Width="16"
													Height="16"
													Source="/Icons/win7foldericon.png" />
											</MenuItem.Icon>
										</MenuItem>
									</ContextMenu>
								</Setter.Value>
							</Setter>
						</Style>
					</controls:EnhancedListView.ItemContainerStyle>
					<controls:EnhancedListView.View>
						<GridView x:Name="filesGridView" AllowsColumnReorder="False">
							<GridView.Columns>
								<GridViewColumn Width="450" Header="{x:Static res:WatcherRes.PathColumnHeader}">
									<GridViewColumn.CellTemplate>
										<DataTemplate>
											<TextBlock Style="{DynamicResource TextBlockBaseStyle}" Text="{Binding WatchedFile.Path}" />
										</DataTemplate>
									</GridViewColumn.CellTemplate>
								</GridViewColumn>
								<GridViewColumn Width="90" Header="{x:Static res:WatcherRes.StatusColumnHeader}">
									<GridViewColumn.CellTemplate>
										<DataTemplate>
											<TextBlock Text="{Binding Status, Converter={StaticResource StatusConverter}}">
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Foreground" Value="{DynamicResource WindowTextBrush}" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding Status}" Value="Encoding">
																<Setter Property="FontWeight" Value="Bold" />
															</DataTrigger>
															<DataTrigger Binding="{Binding Status}" Value="Succeeded">
																<Setter Property="Foreground" Value="{DynamicResource GreenText}" />
															</DataTrigger>
															<DataTrigger Binding="{Binding Status}" Value="Canceled">
																<Setter Property="Foreground" Value="{DynamicResource DescriptiveTextBrush}" />
															</DataTrigger>
															<DataTrigger Binding="{Binding Status}" Value="Skipped">
																<Setter Property="Foreground" Value="{DynamicResource DescriptiveTextBrush}" />
															</DataTrigger>
															<DataTrigger Binding="{Binding Status}" Value="Output">
																<Setter Property="Foreground" Value="{DynamicResource DescriptiveTextBrush}" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>
										</DataTemplate>
									</GridViewColumn.CellTemplate>
								</GridViewColumn>
							</GridView.Columns>
						</GridView>
					</controls:EnhancedListView.View>
				</controls:EnhancedListView>
			</Grid>
		</Grid>
	</Border>
</Window>
