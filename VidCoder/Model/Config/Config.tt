<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#
string fileName = this.Host.ResolvePath("Config.txt");
var settings = new List<ConfigDeclaration>();
var lines = File.ReadLines(fileName);
foreach (string rawLine in lines)
{
	if (!string.IsNullOrWhiteSpace(rawLine) && rawLine[0] != '#')
	{
		string line = rawLine;

		bool obsolete = false;
		if (rawLine[0] == '!')
		{
			line = rawLine.Substring(1);
			obsolete = true;
		}

		int firstPipeIndex = line.IndexOf('|');
		string name = line.Substring(0, firstPipeIndex);

		int secondPipeIndex = line.IndexOf('|', firstPipeIndex + 1);
		string valueType = line.Substring(firstPipeIndex + 1, secondPipeIndex - firstPipeIndex - 1);

		string defaultValue = line.Substring(secondPipeIndex + 1);

		settings.Add(new ConfigDeclaration { Name = name, ValueType = valueType, Default = defaultValue, Obsolete = obsolete });
	}
}
#>
using System;
using System.Collections.Generic;
using System.Data.SQLite;
using VidCoder.Model;

namespace VidCoder
{
	public static class Config
	{
		private static bool initialized;
		private static Dictionary<string, object> cache;
		private static Dictionary<string, object> observableCache;

		public static void EnsureInitialized(SQLiteConnection connection)
		{
			if (!initialized)
			{
				Initialize(connection);
				initialized = true;
			}
		}

		public static void Refresh(SQLiteConnection connection)
		{
			Initialize(connection);
		}

		private static void Initialize(SQLiteConnection connection)
		{
			observableCache = new Dictionary<string, object>();
			cache = new Dictionary<string, object>();
<#
foreach (var setting in settings)
{
#>
			cache.Add("<#= setting.Name #>", DatabaseConfig.Get("<#= setting.Name #>", <#= setting.Default #>, connection));
<#
}   
#>
		}

		public static T Get<T>(string key)
		{
			return (T)cache[key];
		}

		public static void Set<T>(string key, T value)
		{
			cache[key] = value;
			DatabaseConfig.Set(key, value);

			NotifyObservable(key, value);
		}

		public static void SetLegacy<T>(string key, T value)
		{
			cache[key] = value;
			DatabaseConfig.SetLegacy(key, value);

			NotifyObservable(key, value);
		}

		private static void NotifyObservable<T>(string key, T value)
		{
			object observableObject;
			if (observableCache.TryGetValue(key, out observableObject))
			{
				var observable = (ConfigObservable<T>)observableObject;
				observable.OnNext(value);
			}
		}

<#
foreach (var setting in settings)
{
	if (setting.Obsolete) {
#>
		[Obsolete]
<#
	}
#>
		public static <#= setting.ValueType #> <#= setting.Name #>
		{
			get { return (<#= setting.ValueType #>)cache["<#= setting.Name #>"]; }
			set { Set("<#= setting.Name #>", value); }
		}
<#
}   
#>
		public static class Observables
		{
<#
foreach (var setting in settings)
{
	if (setting.Obsolete) {
#>
			[Obsolete]
<#
	}
#>
			public static IObservable<<#= setting.ValueType #>> <#= setting.Name #> => GetObservable<<#= setting.ValueType #>>("<#= setting.Name #>");
<#
}   
#>
			private static IObservable<T> GetObservable<T>(string configName)
			{
				object observableObject;
				if (observableCache.TryGetValue(configName, out observableObject))
				{
					return (ConfigObservable<T>)observableObject;
				}

				var newObservable = new ConfigObservable<T>(configName);
				observableCache.Add(configName, newObservable);

				return newObservable;
			}
		}
	}
}
<#+

public class ConfigDeclaration
{
	public string Name { get; set; }
	public string ValueType { get; set; }
	public string Default { get; set; }
	public bool Obsolete { get; set; }
}

#>