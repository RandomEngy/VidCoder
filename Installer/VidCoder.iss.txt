#include <idp.iss>

[Setup]
AppName=%appName%
AppVerName=%appVerName%
AppVersion=%version%
AppPublisher=RandomEngy
AppPublisherURL=http://vidcoder.net/

DefaultDirName={commonpf}\%folderName%
DisableProgramGroupPage=yes
UninstallDisplayIcon={app}\VidCoder.exe
Compression=lzma
SolidCompression=yes
SetupIconFile=VidCoder_Setup.ico
ChangesAssociations=yes
UsePreviousTasks=yes

OutputDir=%outputDirectory%
OutputBaseFilename=%outputBaseFileName%

AppId=%appId%
UsePreviousAppDir=yes

ArchitecturesAllowed=x64
ArchitecturesInstallIn64BitMode=x64

[Languages]
Name: "en"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "..\VidCoder\bin\publish\*"; DestDir: "{app}"; Flags: recursesubdirs ignoreversion

[Registry]
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\AutoplayHandlers\EventHandlers\PlayBluRayOnArrival"; ValueType: string; ValueName: "%appNameNoSpace%RipDriveOnArrival"; ValueData: ""; Flags: uninsdeletevalue
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\AutoplayHandlers\EventHandlers\PlayDVDMovieOnArrival"; ValueType: string; ValueName: "%appNameNoSpace%RipDriveOnArrival"; ValueData: ""; Flags: uninsdeletevalue

Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\AutoplayHandlers\Handlers\%appNameNoSpace%RipDriveOnArrival"; Flags: uninsdeletekey
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\AutoplayHandlers\Handlers\%appNameNoSpace%RipDriveOnArrival"; ValueType: string; ValueName: "Action"; ValueData: "Rip"
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\AutoplayHandlers\Handlers\%appNameNoSpace%RipDriveOnArrival"; ValueType: string; ValueName: "DefaultIcon"; ValueData: "{app}\VidCoder.exe,0"
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\AutoplayHandlers\Handlers\%appNameNoSpace%RipDriveOnArrival"; ValueType: string; ValueName: "InvokeProgId"; ValueData: "%appNameNoSpace%.RipDrive"
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\AutoplayHandlers\Handlers\%appNameNoSpace%RipDriveOnArrival"; ValueType: string; ValueName: "InvokeVerb"; ValueData: "rip"
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\AutoplayHandlers\Handlers\%appNameNoSpace%RipDriveOnArrival"; ValueType: string; ValueName: "Provider"; ValueData: "%appName%"

Root: HKCR; Subkey: "%appNameNoSpace%.RipDrive"; Flags: uninsdeletekey
Root: HKCR; Subkey: "%appNameNoSpace%.RipDrive\shell"
Root: HKCR; Subkey: "%appNameNoSpace%.RipDrive\shell\rip"
Root: HKCR; Subkey: "%appNameNoSpace%.RipDrive\shell\rip\command"; ValueType: string; ValueData: """{app}\VidCoderWindowlessCLI.exe"" scan -s %L"

Root: HKCR; Subkey: ".vjpreset"; ValueType: string; ValueName: ""; ValueData: "VidCoderPreset"; Flags: uninsdeletevalue 
Root: HKCR; Subkey: "VidCoderPreset"; ValueType: string; ValueName: ""; ValueData: "VidCoder preset"; Flags: uninsdeletekey 
Root: HKCR; Subkey: "VidCoderPreset\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: """{app}\VidCoderPreset.ico""" 
Root: HKCR; Subkey: "VidCoderPreset\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\VidCoderWindowlessCLI.exe"" importpreset ""%1""" 

Root: HKCR; Subkey: ".vjqueue"; ValueType: string; ValueName: ""; ValueData: "VidCoderQueue"; Flags: uninsdeletevalue 
Root: HKCR; Subkey: "VidCoderQueue"; ValueType: string; ValueName: ""; ValueData: "VidCoder queue"; Flags: uninsdeletekey 
Root: HKCR; Subkey: "VidCoderQueue\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: """{app}\VidCoderQueue.ico""" 
Root: HKCR; Subkey: "VidCoderQueue\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\VidCoderWindowlessCLI.exe"" importqueue ""%1""" 

[Messages]
WelcomeLabel2=This will install [name/ver] on your computer.

[Icons]
Name: "{commonprograms}\%appName%"; Filename: "{app}\VidCoder.exe"; WorkingDir: "{app}"; AppUserModelID: "VidCoder.VidCoder"
Name: "{commondesktop}\%appName%"; Filename: "{app}\VidCoder.exe"; WorkingDir: "{app}"; AppUserModelID: "VidCoder.VidCoder"; Tasks: desktopicon

[Tasks]
Name: desktopicon; Description: "Create a desktop icon"

[Run]
Filename: "{app}\VidCoder.exe"; Description: "Run VidCoder"; Flags: postinstall nowait skipifsilent

[UninstallDelete]
Type: filesandordirs; Name: "{userappdata}\%folderName%\Updates"
Type: filesandordirs; Name: "{localappdata}\%folderName%"

[CustomMessages]
IDP_DownloadFailed=Download of .NET Framework 4.7.2 failed. .NET Framework 4.7 is required to run VidCoder.
IDP_RetryCancel=Click 'Retry' to try downloading the files again, or click 'Cancel' to terminate setup.
InstallingDotNetFramework=Installing .NET Framework 4.7.2. This might take a few minutes...
DotNetFrameworkFailedToLaunch=Failed to launch .NET Framework Installer with error "%1". Please fix the error then run this installer again.
DotNetFrameworkFailed1602=.NET Framework installation was cancelled. This installation can continue, but be aware that this application may not run unless the .NET Framework installation is completed successfully.
DotNetFrameworkFailed1603=A fatal error occurred while installing the .NET Framework. Please fix the error, then run the installer again.
DotNetFrameworkFailed5100=Your computer does not meet the requirements of the .NET Framework. Please consult the documentation.
DotNetFrameworkFailedOther=The .NET Framework installer exited with an unexpected status code "%1". Please review any other messages shown by the installer to determine whether the installation completed successfully, and abort this installation and fix the problem if it did not.

[Code]

var
  requiresRestart: boolean;

function NetFrameworkIsMissing(): Boolean;
var
  bSuccess: Boolean;
  regVersion: Cardinal;
begin
  Result := True;

  bSuccess := RegQueryDWordValue(HKLM, 'Software\Microsoft\NET Framework Setup\NDP\v4\Full', 'Release', regVersion);
  if (True = bSuccess) and (regVersion >= 461308) then begin
    Result := False;
  end;
end;

function InitializeSetup(): Boolean;
var
  Version: TWindowsVersion;
begin
	GetWindowsVersionEx(Version);
	
	if (Version.Major < 5) or ((Version.Major = 5) and (Version.Minor < 1)) or ((Version.Major = 5) and (Version.Minor = 1) and (Version.ServicePackMajor < 2)) then
	begin
    MsgBox('VidCoder cannot install on your operating system.', mbError, MB_OK);
    exit;
	end;
	
  Result := true;
end;

procedure InitializeWizard;
begin
  if NetFrameworkIsMissing() then
  begin
    idpAddFile('http://go.microsoft.com/fwlink/?LinkId=863262', ExpandConstant('{tmp}\NetFrameworkInstaller.exe'));
    idpDownloadAfter(wpReady);
  end;
end;

function InstallFramework(): String;
var
  StatusText: string;
  ResultCode: Integer;
begin
  StatusText := WizardForm.StatusLabel.Caption;
  WizardForm.StatusLabel.Caption := CustomMessage('InstallingDotNetFramework');
  WizardForm.ProgressGauge.Style := npbstMarquee;
  try
    if not Exec(ExpandConstant('{tmp}\NetFrameworkInstaller.exe'), '/passive /norestart /showrmui /showfinalerror', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
    begin
      Result := FmtMessage(CustomMessage('DotNetFrameworkFailedToLaunch'), [SysErrorMessage(resultCode)]);
    end
    else
    begin
      // See https://msdn.microsoft.com/en-us/library/ee942965(v=vs.110).aspx#return_codes
      case resultCode of
        0: begin
          // Successful
        end;
        1602 : begin
          MsgBox(CustomMessage('DotNetFrameworkFailed1602'), mbInformation, MB_OK);
        end;
        1603: begin
          Result := CustomMessage('DotNetFrameworkFailed1603');
        end;
        1641: begin
          requiresRestart := True;
        end;
        3010: begin
          requiresRestart := True;
        end;
        5100: begin
          Result := CustomMessage('DotNetFrameworkFailed5100');
        end;
        else begin
          MsgBox(FmtMessage(CustomMessage('DotNetFrameworkFailedOther'), [IntToStr(resultCode)]), mbError, MB_OK);
        end;
      end;
    end;
  finally
    WizardForm.StatusLabel.Caption := StatusText;
    WizardForm.ProgressGauge.Style := npbstNormal;
    
    DeleteFile(ExpandConstant('{tmp}\NetFrameworkInstaller.exe'));
  end;
end;

//util method, equivalent to C# string.StartsWith
function StartsWith(SubStr, S: String):Boolean;
begin
  Result:= Pos(SubStr, S) = 1;
end;

//util method, equivalent to C# string.Replace
function StringReplace(S, oldSubString, newSubString: String) : String;
var
  stringCopy : String;
begin
  stringCopy := S; //Prevent modification to the original string
  StringChange(stringCopy, oldSubString, newSubString);
  Result := stringCopy;
end;

//==================================================================
function GetCommandlineParam (inParamName: String):String;
var
   paramNameAndValue: String;
   i: Integer;
begin
   Result := '';

   for i:= 0 to ParamCount do
   begin
     paramNameAndValue := ParamStr(i);
     if (StartsWith(inParamName, paramNameAndValue)) then
     begin
       Result := StringReplace(paramNameAndValue, inParamName + '=', '');
       break;
     end;
   end;
end;

// Delete app data
procedure DeleteUserFiles();
var
  iAns: Integer;
begin
  if UninstallSilent() then exit;
  
  iAns := MsgBox('Do you want to delete your settings and presets as well?', mbConfirmation, MB_YESNO or MB_DEFBUTTON2);

  if iAns = IDYES then
  begin
    DelTree(ExpandConstant('{userappdata}') + '\%folderName%', True, True, True);
  end; 
end;

// Gets the registry key path for the x86 version uninstall.
function GetX86UninstallRegistryKey(): String;
var
  sUninstPath: String;
  sUninstallString: String;
begin
  sUninstPath := ExpandConstant('Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\%x86AppId%_is1');
  sUninstallString := '';
  if not RegQueryStringValue(HKLM, sUninstPath, 'UninstallString', sUninstallString) then
    RegQueryStringValue(HKCU, sUninstPath, 'UninstallString', sUninstallString);
  Result := sUninstallString;
end;

// Uninstalls the old x86 version.
function UninstallX86Version(): Integer;
var
  sUninstallString: String;
  iResultCode: Integer;
begin
  // Return Values:
  // 1 - uninstall string is empty
  // 2 - error executing the UninstallString
  // 3 - successfully executed the UninstallString

  // default return value
  Result := 0;

  // get the uninstall string of the old app
  sUninstallString := GetX86UninstallRegistryKey();
  if sUninstallString <> '' then begin
    sUninstallString := RemoveQuotes(sUninstallString);
    if Exec(sUninstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then
      Result := 3
    else
      Result := 2;
  end else
    Result := 1;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
   showSuccessDialog: String;
   launchWhenDone: String;
   iResultCode: Integer;
begin
  case CurStep of
    ssInstall:
      begin
        if (GetX86UninstallRegistryKey() <> '') then
        begin
          UninstallX86Version();
        end;
      end;
    ssDone:
      begin
        showSuccessDialog := GetCommandLineParam('/showSuccessDialog');
        if showSuccessDialog <> '' then
        begin
          MsgBox('VidCoder has been successfully updated.', mbInformation, MB_OK);
        end;
        launchWhenDone := GetCommandLineParam('/launchWhenDone');
        if launchWhenDone <> '' then
        begin
          ExecAsOriginalUser(ExpandConstant('{app}\VidCoder.exe'), '', '', SW_SHOW, ewNoWait, iResultCode);
        end;
     end;
  end;
end;


procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  case CurUninstallStep of
    usUninstall:
      begin
        DeleteUserFiles;
      end;
  end;
end;

function PrepareToInstall(var NeedsRestart: Boolean): String;
begin
  // 'NeedsRestart' only has an effect if we return a non-empty string, thus aborting the installation.
  // If the installers indicate that they want a restart, this should be done at the end of installation.
  // Therefore we set the global 'restartRequired' if a restart is needed, and return this from NeedRestart()

  if NetFrameworkIsMissing() then
  begin
    Result := InstallFramework();
  end;
end;

function NeedRestart(): Boolean;
begin
  Result := requiresRestart;
end;

